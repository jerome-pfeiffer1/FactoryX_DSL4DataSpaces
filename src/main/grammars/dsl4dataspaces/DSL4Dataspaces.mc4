package dsl4dataspaces;

import de.monticore.types.*;
import de.monticore.literals.*;

grammar DSL4Dataspaces extends MCBasicTypes, MCJavaLiterals {

    DataSpaceConnectorConfiguration =
        "connector config" Name "{"
            ConfigurationElements+
        "}";

    interface ConfigurationElements;
    ComplexName = Name ("-" Name)*;

    DiscoveryData implements ConfigurationElements =
        "discovery" "{" (
            "linkedAssetID"  assetID:ComplexName ";" |
            "baseUrl"  baseUrl:StringLiteral ";" |
            "endpoint"  endpoint:StringLiteral ";" |
            "idType"  idType:["URI"] ";" |
            AssetMetaData)*
        "}";

    AssetMetaData  =
        "asset" "{" (
            "title"  title:ComplexName+ ";" |
            "description"  description:StringLiteral ";" |
            "publisher"  publisher:Name+ ";" |
            "sidiCodes"  "[" (StringLiteral ("," StringLiteral)*)? "]" ";" |
            "version"  version:StringLiteral ";" |
            "created"  created:StringLiteral ";" |
            "modified"  modified:StringLiteral ";" |
            "language"  language:[de:"de"|en:"en"|nl:"nl"] ";" )*
        "}";

    interface Usage extends ConfigurationElements;

    BaseUsage  =
        "dataAddress"  dataAddress:StringLiteral ";"
        "dataSchemaAddress"  schemaAddress:StringLiteral ";";


    OPCUAUsage implements Usage =
        "opcua" "usage" "{" (
            BaseUsage |
            "supportedProtocols"  "[" (StringLiteral ("," StringLiteral)*)? "]" ";" |
            ("qosMetrics"  "[" StringLiteral ("," StringLiteral)*)? "]" ";" |
            "securityPolicy"  StringLiteral ";" |
            "securityMode"  StringLiteral ";" |
            "authenticationMode"  StringLiteral ";" |
            AccessPolicy )*
        "}";

    EDCUsage implements Usage =
        "edc" "usage" "{" (
            BaseUsage |
            "remoteAddress"  StringLiteral ";" |
            "remoteID"  (Name || ":")+ ";" |
            "xAPIKey"  StringLiteral ";" |
            "stsServiceAddress"  StringLiteral ";" |
            "registries"  "{" (StringLiteral ("," StringLiteral)*)? "}" ";" |
            EDCPushEndpointsConfig |
            AccessPolicy )*
        "}";

    EDCPushEndpointsConfig =
        "push" "endpoints" "{" (
            "cloudPush"  "{" (ComplexName "=" StringLiteral ("," ComplexName "=" StringLiteral)*)? "}" ";" |
            "callBackAddress"  StringLiteral ";" )*
        "}";

    AccessPolicy =
        "access" "policy" "{" (
            "usagePolicy"  StringLiteral ";" |
            "contractOffer"  "{" (Name "=" StringLiteral | ",")+ "}"  ";" |
            "accessControl"  "[" Role ("," Role)* "]" ";" |
            IdentityProviderConfig |
            OAuthInfo )*
        "}";

    Role =
        "Role" "{"
            "name" ComplexName ";"
            "permissions"  "[" (ComplexName ("," ComplexName)*)? "]" ";"
        "}";

    IdentityProviderConfig  =
        "identity" "provider" "config" "{"
            ("idpEndpoint"  StringLiteral ";" |
            "clientId"  ComplexName ";" |
            "secret"  StringLiteral ";" |
            "grantType"  ComplexName ";" )*
        "}";

    OAuthInfo implements ConfigurationElements =
        "oauth" "{" (
            "id"  StringLiteral ";" |
            "secret"  StringLiteral ";" |
            "grantType"  StringLiteral ";" |
            "scope"  StringLiteral ";")*
        "}";


}
