/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._util;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class DSL4DataspacesTypeDispatcher  implements dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesHandler {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.literals.mcjavaliterals._util.MCJavaLiteralsTypeDispatcher mCJavaLiteralsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher mCBasicTypesTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher mCCommonLiteralsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher mCLiteralsBasisTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.mcbasics._util.MCBasicsTypeDispatcher mCBasicsTypeDispatcher
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration> optASTDataSpaceConnectorConfiguration
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTIdentificationData> optASTIdentificationData
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> optASTAssetMetaData
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage> optASTBaseUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage> optASTOPCUAUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage> optASTEDCUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig> optASTEDCPushEndpointsConfig
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy> optASTAccessPolicy
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTRole> optASTRole
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig> optASTIdentityProviderConfig
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo> optASTOAuthInfo
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements> optASTConfigurationElements
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTUsage> optASTUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.DSL4DataspacesLiterals> optDSL4DataspacesLiterals
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode> optASTDSL4DataspacesNode
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTDataSpaceConnectorConfiguration
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTIdentificationData
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTAssetMetaData
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTBaseUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTOPCUAUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTEDCUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTEDCPushEndpointsConfig
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTAccessPolicy
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTRole
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTIdentityProviderConfig
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTOAuthInfo
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTConfigurationElements
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTUsage
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isDSL4DataspacesLiterals
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isASTDSL4DataspacesNode
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope> optIDSL4DataspacesArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesGlobalScope> optIDSL4DataspacesGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope> optIDSL4DataspacesScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesScope> optDSL4DataspacesScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesArtifactScope> optDSL4DataspacesArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Optional<dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesGlobalScope> optDSL4DataspacesGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isIDSL4DataspacesArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isIDSL4DataspacesGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isIDSL4DataspacesScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isDSL4DataspacesScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isDSL4DataspacesArtifactScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean isDSL4DataspacesGlobalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  DSL4DataspacesTypeDispatcher()
 {
  /* generated by template dispatcher.Constructor*/


dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.traverser();
this.setTraverser(traverser);

this.getTraverser().setDSL4DataspacesHandler(this);

    this.mCJavaLiteralsTypeDispatcher = new de.monticore.literals.mcjavaliterals._util.MCJavaLiteralsTypeDispatcher();
    this.getTraverser().setMCJavaLiteralsHandler(this.mCJavaLiteralsTypeDispatcher);
    this.mCBasicTypesTypeDispatcher = new de.monticore.types.mcbasictypes._util.MCBasicTypesTypeDispatcher();
    this.getTraverser().setMCBasicTypesHandler(this.mCBasicTypesTypeDispatcher);
    this.mCCommonLiteralsTypeDispatcher = new de.monticore.literals.mccommonliterals._util.MCCommonLiteralsTypeDispatcher();
    this.getTraverser().setMCCommonLiteralsHandler(this.mCCommonLiteralsTypeDispatcher);
    this.mCLiteralsBasisTypeDispatcher = new de.monticore.literals.mcliteralsbasis._util.MCLiteralsBasisTypeDispatcher();
    this.getTraverser().setMCLiteralsBasisHandler(this.mCLiteralsBasisTypeDispatcher);
    this.mCBasicsTypeDispatcher = new de.monticore.mcbasics._util.MCBasicsTypeDispatcher();
    this.getTraverser().setMCBasicsHandler(this.mCBasicsTypeDispatcher);

}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser getTraverser ()

 {
    return this.traverser;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser)

 {
    this.traverser = traverser;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void reset ()

 {
    /* generated by template dispatcher.Reset*/


    mCJavaLiteralsTypeDispatcher.reset();
    mCBasicTypesTypeDispatcher.reset();
    mCCommonLiteralsTypeDispatcher.reset();
    mCLiteralsBasisTypeDispatcher.reset();
    mCBasicsTypeDispatcher.reset();

  isASTDataSpaceConnectorConfiguration = false;
  isASTIdentificationData = false;
  isASTAssetMetaData = false;
  isASTBaseUsage = false;
  isASTOPCUAUsage = false;
  isASTEDCUsage = false;
  isASTEDCPushEndpointsConfig = false;
  isASTAccessPolicy = false;
  isASTRole = false;
  isASTIdentityProviderConfig = false;
  isASTOAuthInfo = false;
  isASTConfigurationElements = false;
  isASTUsage = false;
  isDSL4DataspacesLiterals = false;
  isASTDSL4DataspacesNode = false;
  isIDSL4DataspacesArtifactScope = false;
  isIDSL4DataspacesGlobalScope = false;
  isIDSL4DataspacesScope = false;
  isDSL4DataspacesScope = false;
  isDSL4DataspacesArtifactScope = false;
  isDSL4DataspacesGlobalScope = false;
    optASTDataSpaceConnectorConfiguration = Optional.empty();
    optASTIdentificationData = Optional.empty();
    optASTAssetMetaData = Optional.empty();
    optASTBaseUsage = Optional.empty();
    optASTOPCUAUsage = Optional.empty();
    optASTEDCUsage = Optional.empty();
    optASTEDCPushEndpointsConfig = Optional.empty();
    optASTAccessPolicy = Optional.empty();
    optASTRole = Optional.empty();
    optASTIdentityProviderConfig = Optional.empty();
    optASTOAuthInfo = Optional.empty();
    optASTConfigurationElements = Optional.empty();
    optASTUsage = Optional.empty();
    optDSL4DataspacesLiterals = Optional.empty();
    optASTDSL4DataspacesNode = Optional.empty();
    optIDSL4DataspacesArtifactScope = Optional.empty();
    optIDSL4DataspacesGlobalScope = Optional.empty();
    optIDSL4DataspacesScope = Optional.empty();
    optDSL4DataspacesScope = Optional.empty();
    optDSL4DataspacesArtifactScope = Optional.empty();
    optDSL4DataspacesGlobalScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTDataSpaceConnectorConfiguration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTDataSpaceConnectorConfiguration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTIdentificationData (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTIdentificationData();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTAssetMetaData (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTAssetMetaData();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBaseUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTBaseUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOPCUAUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTOPCUAUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTEDCUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTEDCUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTEDCPushEndpointsConfig (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTEDCPushEndpointsConfig();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTAccessPolicy (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTAccessPolicy();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTRole (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTRole();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTIdentityProviderConfig (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTIdentityProviderConfig();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTOAuthInfo (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTOAuthInfo();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTConfigurationElements (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTConfigurationElements();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isDSL4DataspacesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsDSL4DataspacesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTDSL4DataspacesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return this.isIsASTDSL4DataspacesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIDSL4DataspacesArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsIDSL4DataspacesArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIDSL4DataspacesGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsIDSL4DataspacesGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIDSL4DataspacesScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsIDSL4DataspacesScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isDSL4DataspacesScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsDSL4DataspacesScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isDSL4DataspacesArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsDSL4DataspacesArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isDSL4DataspacesGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.IsAST*/


reset();
scope.accept(this.getTraverser());
return this.isIsDSL4DataspacesGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration asASTDataSpaceConnectorConfiguration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTDataSpaceConnectorConfiguration(node)) {
  Log.error("0x54987x31505 Cannot cast node to type ASTDataSpaceConnectorConfiguration.");
}
return this.getOptASTDataSpaceConnectorConfiguration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTIdentificationData asASTIdentificationData (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTIdentificationData(node)) {
  Log.error("0x54987x02988 Cannot cast node to type ASTIdentificationData.");
}
return this.getOptASTIdentificationData();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData asASTAssetMetaData (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTAssetMetaData(node)) {
  Log.error("0x54987x76747 Cannot cast node to type ASTAssetMetaData.");
}
return this.getOptASTAssetMetaData();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage asASTBaseUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBaseUsage(node)) {
  Log.error("0x54987x21188 Cannot cast node to type ASTBaseUsage.");
}
return this.getOptASTBaseUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage asASTOPCUAUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOPCUAUsage(node)) {
  Log.error("0x54987x66663 Cannot cast node to type ASTOPCUAUsage.");
}
return this.getOptASTOPCUAUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage asASTEDCUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTEDCUsage(node)) {
  Log.error("0x54987x11761 Cannot cast node to type ASTEDCUsage.");
}
return this.getOptASTEDCUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig asASTEDCPushEndpointsConfig (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTEDCPushEndpointsConfig(node)) {
  Log.error("0x54987x22006 Cannot cast node to type ASTEDCPushEndpointsConfig.");
}
return this.getOptASTEDCPushEndpointsConfig();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy asASTAccessPolicy (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTAccessPolicy(node)) {
  Log.error("0x54987x59946 Cannot cast node to type ASTAccessPolicy.");
}
return this.getOptASTAccessPolicy();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTRole asASTRole (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTRole(node)) {
  Log.error("0x54987x51510 Cannot cast node to type ASTRole.");
}
return this.getOptASTRole();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig asASTIdentityProviderConfig (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTIdentityProviderConfig(node)) {
  Log.error("0x54987x31365 Cannot cast node to type ASTIdentityProviderConfig.");
}
return this.getOptASTIdentityProviderConfig();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo asASTOAuthInfo (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTOAuthInfo(node)) {
  Log.error("0x54987x95823 Cannot cast node to type ASTOAuthInfo.");
}
return this.getOptASTOAuthInfo();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements asASTConfigurationElements (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTConfigurationElements(node)) {
  Log.error("0x54987x47257 Cannot cast node to type ASTConfigurationElements.");
}
return this.getOptASTConfigurationElements();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTUsage asASTUsage (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTUsage(node)) {
  Log.error("0x54987x24653 Cannot cast node to type ASTUsage.");
}
return this.getOptASTUsage();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.DSL4DataspacesLiterals asDSL4DataspacesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isDSL4DataspacesLiterals(node)) {
  Log.error("0x54987x90720 Cannot cast node to type DSL4DataspacesLiterals.");
}
return this.getOptDSL4DataspacesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode asASTDSL4DataspacesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTDSL4DataspacesNode(node)) {
  Log.error("0x54987x41116 Cannot cast node to type ASTDSL4DataspacesNode.");
}
return this.getOptASTDSL4DataspacesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope asIDSL4DataspacesArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isIDSL4DataspacesArtifactScope(scope)) {
  Log.error("0x54987x23545 Cannot cast node to type IDSL4DataspacesArtifactScope.");
}
return this.getOptIDSL4DataspacesArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesGlobalScope asIDSL4DataspacesGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isIDSL4DataspacesGlobalScope(scope)) {
  Log.error("0x54987x11064 Cannot cast node to type IDSL4DataspacesGlobalScope.");
}
return this.getOptIDSL4DataspacesGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope asIDSL4DataspacesScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isIDSL4DataspacesScope(scope)) {
  Log.error("0x54987x00437 Cannot cast node to type IDSL4DataspacesScope.");
}
return this.getOptIDSL4DataspacesScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesScope asDSL4DataspacesScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isDSL4DataspacesScope(scope)) {
  Log.error("0x54987x55432 Cannot cast node to type DSL4DataspacesScope.");
}
return this.getOptDSL4DataspacesScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesArtifactScope asDSL4DataspacesArtifactScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isDSL4DataspacesArtifactScope(scope)) {
  Log.error("0x54987x05594 Cannot cast node to type DSL4DataspacesArtifactScope.");
}
return this.getOptDSL4DataspacesArtifactScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesGlobalScope asDSL4DataspacesGlobalScope (de.monticore.symboltable.IScope scope)

 {
    /* generated by template dispatcher.AsAST*/


if(!isDSL4DataspacesGlobalScope(scope)) {
  Log.error("0x54987x49323 Cannot cast node to type DSL4DataspacesGlobalScope.");
}
return this.getOptDSL4DataspacesGlobalScope();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTIntLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCJavaLiteralsTypeDispatcher.isIsASTIntLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCJavaLiteralsTypeDispatcher.isIsASTLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCJavaLiteralsTypeDispatcher.isIsASTFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCJavaLiteralsTypeDispatcher.isIsASTDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCJavaLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCJavaLiteralsTypeDispatcher.isIsMCJavaLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCJavaLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCJavaLiteralsTypeDispatcher.isIsASTMCJavaLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCQualifiedName (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCQualifiedName();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCPackageDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCPackageDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCImportStatement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCImportStatement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCPrimitiveType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCPrimitiveType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCQualifiedType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCQualifiedType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCReturnType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCReturnType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCVoidType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCVoidType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCObjectType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCObjectType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCBasicTypesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsMCBasicTypesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCBasicTypesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicTypesTypeDispatcher.isIsASTMCBasicTypesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNullLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNullLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBooleanLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBooleanLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTCharLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTCharLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTStringLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTStringLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTSignedNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTSignedNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCCommonLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsMCCommonLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCCommonLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCCommonLiteralsTypeDispatcher.isIsASTMCCommonLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsASTLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCLiteralsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsMCLiteralsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCLiteralsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCLiteralsBasisTypeDispatcher.isIsASTMCLiteralsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isMCBasicsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicsTypeDispatcher.isIsMCBasicsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isASTMCBasicsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.IsAST*/


reset();
node.accept(this.getTraverser());
return mCBasicsTypeDispatcher.isIsASTMCBasicsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcjavaliterals._ast.ASTIntLiteral asASTIntLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTIntLiteral(node)) {
  Log.error("0x54987x77588 Cannot cast node to type ASTIntLiteral.");
}
return mCJavaLiteralsTypeDispatcher.getOptASTIntLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcjavaliterals._ast.ASTLongLiteral asASTLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLongLiteral(node)) {
  Log.error("0x54987x07969 Cannot cast node to type ASTLongLiteral.");
}
return mCJavaLiteralsTypeDispatcher.getOptASTLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcjavaliterals._ast.ASTFloatLiteral asASTFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTFloatLiteral(node)) {
  Log.error("0x54987x53255 Cannot cast node to type ASTFloatLiteral.");
}
return mCJavaLiteralsTypeDispatcher.getOptASTFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcjavaliterals._ast.ASTDoubleLiteral asASTDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTDoubleLiteral(node)) {
  Log.error("0x54987x20394 Cannot cast node to type ASTDoubleLiteral.");
}
return mCJavaLiteralsTypeDispatcher.getOptASTDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcjavaliterals._ast.MCJavaLiteralsLiterals asMCJavaLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCJavaLiteralsLiterals(node)) {
  Log.error("0x54987x13262 Cannot cast node to type MCJavaLiteralsLiterals.");
}
return mCJavaLiteralsTypeDispatcher.getOptMCJavaLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcjavaliterals._ast.ASTMCJavaLiteralsNode asASTMCJavaLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCJavaLiteralsNode(node)) {
  Log.error("0x54987x53746 Cannot cast node to type ASTMCJavaLiteralsNode.");
}
return mCJavaLiteralsTypeDispatcher.getOptASTMCJavaLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName asASTMCQualifiedName (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCQualifiedName(node)) {
  Log.error("0x54987x37565 Cannot cast node to type ASTMCQualifiedName.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCQualifiedName();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclaration asASTMCPackageDeclaration (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCPackageDeclaration(node)) {
  Log.error("0x54987x16702 Cannot cast node to type ASTMCPackageDeclaration.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCPackageDeclaration();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCImportStatement asASTMCImportStatement (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCImportStatement(node)) {
  Log.error("0x54987x21536 Cannot cast node to type ASTMCImportStatement.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCImportStatement();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType asASTMCPrimitiveType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCPrimitiveType(node)) {
  Log.error("0x54987x68169 Cannot cast node to type ASTMCPrimitiveType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCPrimitiveType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType asASTMCQualifiedType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCQualifiedType(node)) {
  Log.error("0x54987x39468 Cannot cast node to type ASTMCQualifiedType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCQualifiedType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCReturnType asASTMCReturnType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCReturnType(node)) {
  Log.error("0x54987x65004 Cannot cast node to type ASTMCReturnType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCReturnType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCVoidType asASTMCVoidType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCVoidType(node)) {
  Log.error("0x54987x33816 Cannot cast node to type ASTMCVoidType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCVoidType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCType asASTMCType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCType(node)) {
  Log.error("0x54987x65188 Cannot cast node to type ASTMCType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCObjectType asASTMCObjectType (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCObjectType(node)) {
  Log.error("0x54987x15709 Cannot cast node to type ASTMCObjectType.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCObjectType();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.MCBasicTypesLiterals asMCBasicTypesLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCBasicTypesLiterals(node)) {
  Log.error("0x54987x52147 Cannot cast node to type MCBasicTypesLiterals.");
}
return mCBasicTypesTypeDispatcher.getOptMCBasicTypesLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode asASTMCBasicTypesNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCBasicTypesNode(node)) {
  Log.error("0x54987x28887 Cannot cast node to type ASTMCBasicTypesNode.");
}
return mCBasicTypesTypeDispatcher.getOptASTMCBasicTypesNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNullLiteral asASTNullLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNullLiteral(node)) {
  Log.error("0x54987x65708 Cannot cast node to type ASTNullLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNullLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral asASTBooleanLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBooleanLiteral(node)) {
  Log.error("0x54987x82693 Cannot cast node to type ASTBooleanLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBooleanLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTCharLiteral asASTCharLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTCharLiteral(node)) {
  Log.error("0x54987x71643 Cannot cast node to type ASTCharLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTCharLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral asASTStringLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTStringLiteral(node)) {
  Log.error("0x54987x60170 Cannot cast node to type ASTStringLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTStringLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNatLiteral asASTNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNatLiteral(node)) {
  Log.error("0x54987x81602 Cannot cast node to type ASTNatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral asASTSignedNatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedNatLiteral(node)) {
  Log.error("0x54987x39070 Cannot cast node to type ASTSignedNatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedNatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral asASTBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicLongLiteral(node)) {
  Log.error("0x54987x65465 Cannot cast node to type ASTBasicLongLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral asASTSignedBasicLongLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicLongLiteral(node)) {
  Log.error("0x54987x42005 Cannot cast node to type ASTSignedBasicLongLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicLongLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral asASTBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicFloatLiteral(node)) {
  Log.error("0x54987x89453 Cannot cast node to type ASTBasicFloatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral asASTSignedBasicFloatLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicFloatLiteral(node)) {
  Log.error("0x54987x23825 Cannot cast node to type ASTSignedBasicFloatLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicFloatLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral asASTBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTBasicDoubleLiteral(node)) {
  Log.error("0x54987x24764 Cannot cast node to type ASTBasicDoubleLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral asASTSignedBasicDoubleLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedBasicDoubleLiteral(node)) {
  Log.error("0x54987x88160 Cannot cast node to type ASTSignedBasicDoubleLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedBasicDoubleLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral asASTSignedLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedLiteral(node)) {
  Log.error("0x54987x64225 Cannot cast node to type ASTSignedLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral asASTNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTNumericLiteral(node)) {
  Log.error("0x54987x64042 Cannot cast node to type ASTNumericLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral asASTSignedNumericLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTSignedNumericLiteral(node)) {
  Log.error("0x54987x61550 Cannot cast node to type ASTSignedNumericLiteral.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTSignedNumericLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.MCCommonLiteralsLiterals asMCCommonLiteralsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCCommonLiteralsLiterals(node)) {
  Log.error("0x54987x48535 Cannot cast node to type MCCommonLiteralsLiterals.");
}
return mCCommonLiteralsTypeDispatcher.getOptMCCommonLiteralsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode asASTMCCommonLiteralsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCCommonLiteralsNode(node)) {
  Log.error("0x54987x09861 Cannot cast node to type ASTMCCommonLiteralsNode.");
}
return mCCommonLiteralsTypeDispatcher.getOptASTMCCommonLiteralsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.ASTLiteral asASTLiteral (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTLiteral(node)) {
  Log.error("0x54987x76091 Cannot cast node to type ASTLiteral.");
}
return mCLiteralsBasisTypeDispatcher.getOptASTLiteral();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.MCLiteralsBasisLiterals asMCLiteralsBasisLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCLiteralsBasisLiterals(node)) {
  Log.error("0x54987x23750 Cannot cast node to type MCLiteralsBasisLiterals.");
}
return mCLiteralsBasisTypeDispatcher.getOptMCLiteralsBasisLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode asASTMCLiteralsBasisNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCLiteralsBasisNode(node)) {
  Log.error("0x54987x16334 Cannot cast node to type ASTMCLiteralsBasisNode.");
}
return mCLiteralsBasisTypeDispatcher.getOptASTMCLiteralsBasisNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.mcbasics._ast.MCBasicsLiterals asMCBasicsLiterals (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isMCBasicsLiterals(node)) {
  Log.error("0x54987x94989 Cannot cast node to type MCBasicsLiterals.");
}
return mCBasicsTypeDispatcher.getOptMCBasicsLiterals();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.mcbasics._ast.ASTMCBasicsNode asASTMCBasicsNode (de.monticore.ast.ASTNode node)

 {
    /* generated by template dispatcher.AsAST*/


if(!isASTMCBasicsNode(node)) {
  Log.error("0x54987x73329 Cannot cast node to type ASTMCBasicsNode.");
}
return mCBasicsTypeDispatcher.getOptASTMCBasicsNode();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.literals.mcjavaliterals._symboltable.IMCJavaLiteralsArtifactScope) node);
  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesArtifactScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsArtifactScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisArtifactScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsArtifactScope) node);
this.setIsIDSL4DataspacesArtifactScope(true);
this.setOptIDSL4DataspacesArtifactScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesGlobalScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.literals.mcjavaliterals._symboltable.IMCJavaLiteralsGlobalScope) node);
  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesGlobalScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsGlobalScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisGlobalScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsGlobalScope) node);
this.setIsIDSL4DataspacesGlobalScope(true);
this.setOptIDSL4DataspacesGlobalScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((de.monticore.literals.mcjavaliterals._symboltable.IMCJavaLiteralsScope) node);
  this.getTraverser().handle((de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope) node);
  this.getTraverser().handle((de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope) node);
  this.getTraverser().handle((de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope) node);
  this.getTraverser().handle((de.monticore.mcbasics._symboltable.IMCBasicsScope) node);
this.setIsIDSL4DataspacesScope(true);
this.setOptIDSL4DataspacesScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesArtifactScope node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope) node);
this.setIsDSL4DataspacesArtifactScope(true);
this.setOptDSL4DataspacesArtifactScope(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTDataSpaceConnectorConfiguration(true);
this.setOptASTDataSpaceConnectorConfiguration(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentificationData node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements) node);
this.setIsASTIdentificationData(true);
this.setOptASTIdentificationData(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements) node);
this.setIsASTAssetMetaData(true);
this.setOptASTAssetMetaData(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTUsage) node);
this.setIsASTBaseUsage(true);
this.setOptASTBaseUsage(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTUsage) node);
this.setIsASTOPCUAUsage(true);
this.setOptASTOPCUAUsage(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTUsage) node);
this.setIsASTEDCUsage(true);
this.setOptASTEDCUsage(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTEDCPushEndpointsConfig(true);
this.setOptASTEDCPushEndpointsConfig(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements) node);
this.setIsASTAccessPolicy(true);
this.setOptASTAccessPolicy(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTRole(true);
this.setOptASTRole(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements) node);
this.setIsASTIdentityProviderConfig(true);
this.setOptASTIdentityProviderConfig(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements) node);
this.setIsASTOAuthInfo(true);
this.setOptASTOAuthInfo(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTConfigurationElements(true);
this.setOptASTConfigurationElements(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTUsage node)

 {
    /* generated by template dispatcher.Handle*/


  this.getTraverser().handle((dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements) node);
this.setIsASTUsage(true);
this.setOptASTUsage(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.DSL4DataspacesLiterals node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsDSL4DataspacesLiterals(true);
this.setOptDSL4DataspacesLiterals(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode node)

 {
    /* generated by template dispatcher.Handle*/


this.setIsASTDSL4DataspacesNode(true);
this.setOptASTDSL4DataspacesNode(node);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTDataSpaceConnectorConfiguration ()

 {
    /* generated by template methods.Get*/

return this.isASTDataSpaceConnectorConfiguration;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTDataSpaceConnectorConfiguration (boolean isASTDataSpaceConnectorConfiguration)

 {
    /* generated by template methods.Set*/

this.isASTDataSpaceConnectorConfiguration = isASTDataSpaceConnectorConfiguration;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTIdentificationData ()

 {
    /* generated by template methods.Get*/

return this.isASTIdentificationData;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTIdentificationData (boolean isASTIdentificationData)

 {
    /* generated by template methods.Set*/

this.isASTIdentificationData = isASTIdentificationData;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTAssetMetaData ()

 {
    /* generated by template methods.Get*/

return this.isASTAssetMetaData;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTAssetMetaData (boolean isASTAssetMetaData)

 {
    /* generated by template methods.Set*/

this.isASTAssetMetaData = isASTAssetMetaData;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTBaseUsage ()

 {
    /* generated by template methods.Get*/

return this.isASTBaseUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTBaseUsage (boolean isASTBaseUsage)

 {
    /* generated by template methods.Set*/

this.isASTBaseUsage = isASTBaseUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTOPCUAUsage ()

 {
    /* generated by template methods.Get*/

return this.isASTOPCUAUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTOPCUAUsage (boolean isASTOPCUAUsage)

 {
    /* generated by template methods.Set*/

this.isASTOPCUAUsage = isASTOPCUAUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTEDCUsage ()

 {
    /* generated by template methods.Get*/

return this.isASTEDCUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTEDCUsage (boolean isASTEDCUsage)

 {
    /* generated by template methods.Set*/

this.isASTEDCUsage = isASTEDCUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTEDCPushEndpointsConfig ()

 {
    /* generated by template methods.Get*/

return this.isASTEDCPushEndpointsConfig;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTEDCPushEndpointsConfig (boolean isASTEDCPushEndpointsConfig)

 {
    /* generated by template methods.Set*/

this.isASTEDCPushEndpointsConfig = isASTEDCPushEndpointsConfig;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTAccessPolicy ()

 {
    /* generated by template methods.Get*/

return this.isASTAccessPolicy;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTAccessPolicy (boolean isASTAccessPolicy)

 {
    /* generated by template methods.Set*/

this.isASTAccessPolicy = isASTAccessPolicy;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTRole ()

 {
    /* generated by template methods.Get*/

return this.isASTRole;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTRole (boolean isASTRole)

 {
    /* generated by template methods.Set*/

this.isASTRole = isASTRole;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTIdentityProviderConfig ()

 {
    /* generated by template methods.Get*/

return this.isASTIdentityProviderConfig;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTIdentityProviderConfig (boolean isASTIdentityProviderConfig)

 {
    /* generated by template methods.Set*/

this.isASTIdentityProviderConfig = isASTIdentityProviderConfig;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTOAuthInfo ()

 {
    /* generated by template methods.Get*/

return this.isASTOAuthInfo;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTOAuthInfo (boolean isASTOAuthInfo)

 {
    /* generated by template methods.Set*/

this.isASTOAuthInfo = isASTOAuthInfo;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTConfigurationElements ()

 {
    /* generated by template methods.Get*/

return this.isASTConfigurationElements;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTConfigurationElements (boolean isASTConfigurationElements)

 {
    /* generated by template methods.Set*/

this.isASTConfigurationElements = isASTConfigurationElements;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTUsage ()

 {
    /* generated by template methods.Get*/

return this.isASTUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTUsage (boolean isASTUsage)

 {
    /* generated by template methods.Set*/

this.isASTUsage = isASTUsage;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsDSL4DataspacesLiterals ()

 {
    /* generated by template methods.Get*/

return this.isDSL4DataspacesLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsDSL4DataspacesLiterals (boolean isDSL4DataspacesLiterals)

 {
    /* generated by template methods.Set*/

this.isDSL4DataspacesLiterals = isDSL4DataspacesLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsASTDSL4DataspacesNode ()

 {
    /* generated by template methods.Get*/

return this.isASTDSL4DataspacesNode;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsASTDSL4DataspacesNode (boolean isASTDSL4DataspacesNode)

 {
    /* generated by template methods.Set*/

this.isASTDSL4DataspacesNode = isASTDSL4DataspacesNode;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsIDSL4DataspacesArtifactScope ()

 {
    /* generated by template methods.Get*/

return this.isIDSL4DataspacesArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsIDSL4DataspacesArtifactScope (boolean isIDSL4DataspacesArtifactScope)

 {
    /* generated by template methods.Set*/

this.isIDSL4DataspacesArtifactScope = isIDSL4DataspacesArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsIDSL4DataspacesGlobalScope ()

 {
    /* generated by template methods.Get*/

return this.isIDSL4DataspacesGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsIDSL4DataspacesGlobalScope (boolean isIDSL4DataspacesGlobalScope)

 {
    /* generated by template methods.Set*/

this.isIDSL4DataspacesGlobalScope = isIDSL4DataspacesGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsIDSL4DataspacesScope ()

 {
    /* generated by template methods.Get*/

return this.isIDSL4DataspacesScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsIDSL4DataspacesScope (boolean isIDSL4DataspacesScope)

 {
    /* generated by template methods.Set*/

this.isIDSL4DataspacesScope = isIDSL4DataspacesScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsDSL4DataspacesScope ()

 {
    /* generated by template methods.Get*/

return this.isDSL4DataspacesScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsDSL4DataspacesScope (boolean isDSL4DataspacesScope)

 {
    /* generated by template methods.Set*/

this.isDSL4DataspacesScope = isDSL4DataspacesScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsDSL4DataspacesArtifactScope ()

 {
    /* generated by template methods.Get*/

return this.isDSL4DataspacesArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsDSL4DataspacesArtifactScope (boolean isDSL4DataspacesArtifactScope)

 {
    /* generated by template methods.Set*/

this.isDSL4DataspacesArtifactScope = isDSL4DataspacesArtifactScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIsDSL4DataspacesGlobalScope ()

 {
    /* generated by template methods.Get*/

return this.isDSL4DataspacesGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIsDSL4DataspacesGlobalScope (boolean isDSL4DataspacesGlobalScope)

 {
    /* generated by template methods.Set*/

this.isDSL4DataspacesGlobalScope = isDSL4DataspacesGlobalScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration getOptASTDataSpaceConnectorConfiguration ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTDataSpaceConnectorConfiguration()) {
        return this.optASTDataSpaceConnectorConfiguration.get();
    }
    Log.error("0xA7003x11827 get for OptASTDataSpaceConnectorConfiguration can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTDataSpaceConnectorConfiguration ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTDataSpaceConnectorConfiguration.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTDataSpaceConnectorConfiguration (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration optASTDataSpaceConnectorConfiguration)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTDataSpaceConnectorConfiguration = Optional.ofNullable(optASTDataSpaceConnectorConfiguration);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTDataSpaceConnectorConfigurationAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTDataSpaceConnectorConfiguration = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTIdentificationData getOptASTIdentificationData ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTIdentificationData()) {
        return this.optASTIdentificationData.get();
    }
    Log.error("0xA7003x11273 get for OptASTIdentificationData can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTIdentificationData ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTIdentificationData.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTIdentificationData (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentificationData optASTIdentificationData)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTIdentificationData = Optional.ofNullable(optASTIdentificationData);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTIdentificationDataAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTIdentificationData = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData getOptASTAssetMetaData ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTAssetMetaData()) {
        return this.optASTAssetMetaData.get();
    }
    Log.error("0xA7003x74623 get for OptASTAssetMetaData can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTAssetMetaData ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTAssetMetaData.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTAssetMetaData (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData optASTAssetMetaData)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTAssetMetaData = Optional.ofNullable(optASTAssetMetaData);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTAssetMetaDataAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTAssetMetaData = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage getOptASTBaseUsage ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTBaseUsage()) {
        return this.optASTBaseUsage.get();
    }
    Log.error("0xA7003x31171 get for OptASTBaseUsage can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTBaseUsage ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTBaseUsage.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTBaseUsage (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage optASTBaseUsage)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTBaseUsage = Optional.ofNullable(optASTBaseUsage);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTBaseUsageAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTBaseUsage = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage getOptASTOPCUAUsage ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTOPCUAUsage()) {
        return this.optASTOPCUAUsage.get();
    }
    Log.error("0xA7003x75017 get for OptASTOPCUAUsage can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTOPCUAUsage ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTOPCUAUsage.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTOPCUAUsage (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage optASTOPCUAUsage)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTOPCUAUsage = Optional.ofNullable(optASTOPCUAUsage);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTOPCUAUsageAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTOPCUAUsage = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage getOptASTEDCUsage ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTEDCUsage()) {
        return this.optASTEDCUsage.get();
    }
    Log.error("0xA7003x68631 get for OptASTEDCUsage can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTEDCUsage ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTEDCUsage.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTEDCUsage (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage optASTEDCUsage)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTEDCUsage = Optional.ofNullable(optASTEDCUsage);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTEDCUsageAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTEDCUsage = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig getOptASTEDCPushEndpointsConfig ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTEDCPushEndpointsConfig()) {
        return this.optASTEDCPushEndpointsConfig.get();
    }
    Log.error("0xA7003x02231 get for OptASTEDCPushEndpointsConfig can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTEDCPushEndpointsConfig ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTEDCPushEndpointsConfig.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTEDCPushEndpointsConfig (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig optASTEDCPushEndpointsConfig)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTEDCPushEndpointsConfig = Optional.ofNullable(optASTEDCPushEndpointsConfig);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTEDCPushEndpointsConfigAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTEDCPushEndpointsConfig = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy getOptASTAccessPolicy ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTAccessPolicy()) {
        return this.optASTAccessPolicy.get();
    }
    Log.error("0xA7003x07703 get for OptASTAccessPolicy can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTAccessPolicy ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTAccessPolicy.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTAccessPolicy (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy optASTAccessPolicy)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTAccessPolicy = Optional.ofNullable(optASTAccessPolicy);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTAccessPolicyAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTAccessPolicy = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTRole getOptASTRole ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTRole()) {
        return this.optASTRole.get();
    }
    Log.error("0xA7003x40841 get for OptASTRole can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTRole ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTRole.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTRole (dsl4dataspaces.dsl4dataspaces._ast.ASTRole optASTRole)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTRole = Optional.ofNullable(optASTRole);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTRoleAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTRole = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig getOptASTIdentityProviderConfig ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTIdentityProviderConfig()) {
        return this.optASTIdentityProviderConfig.get();
    }
    Log.error("0xA7003x53591 get for OptASTIdentityProviderConfig can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTIdentityProviderConfig ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTIdentityProviderConfig.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTIdentityProviderConfig (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig optASTIdentityProviderConfig)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTIdentityProviderConfig = Optional.ofNullable(optASTIdentityProviderConfig);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTIdentityProviderConfigAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTIdentityProviderConfig = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo getOptASTOAuthInfo ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTOAuthInfo()) {
        return this.optASTOAuthInfo.get();
    }
    Log.error("0xA7003x86157 get for OptASTOAuthInfo can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTOAuthInfo ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTOAuthInfo.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTOAuthInfo (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo optASTOAuthInfo)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTOAuthInfo = Optional.ofNullable(optASTOAuthInfo);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTOAuthInfoAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTOAuthInfo = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements getOptASTConfigurationElements ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTConfigurationElements()) {
        return this.optASTConfigurationElements.get();
    }
    Log.error("0xA7003x80931 get for OptASTConfigurationElements can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTConfigurationElements ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTConfigurationElements.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTConfigurationElements (dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements optASTConfigurationElements)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTConfigurationElements = Optional.ofNullable(optASTConfigurationElements);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTConfigurationElementsAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTConfigurationElements = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTUsage getOptASTUsage ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTUsage()) {
        return this.optASTUsage.get();
    }
    Log.error("0xA7003x01285 get for OptASTUsage can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTUsage ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTUsage.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTUsage (dsl4dataspaces.dsl4dataspaces._ast.ASTUsage optASTUsage)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTUsage = Optional.ofNullable(optASTUsage);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTUsageAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTUsage = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.DSL4DataspacesLiterals getOptDSL4DataspacesLiterals ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptDSL4DataspacesLiterals()) {
        return this.optDSL4DataspacesLiterals.get();
    }
    Log.error("0xA7003x60917 get for OptDSL4DataspacesLiterals can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptDSL4DataspacesLiterals ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optDSL4DataspacesLiterals.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesLiterals (dsl4dataspaces.dsl4dataspaces._ast.DSL4DataspacesLiterals optDSL4DataspacesLiterals)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optDSL4DataspacesLiterals = Optional.ofNullable(optDSL4DataspacesLiterals);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesLiteralsAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optDSL4DataspacesLiterals = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode getOptASTDSL4DataspacesNode ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptASTDSL4DataspacesNode()) {
        return this.optASTDSL4DataspacesNode.get();
    }
    Log.error("0xA7003x46487 get for OptASTDSL4DataspacesNode can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptASTDSL4DataspacesNode ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optASTDSL4DataspacesNode.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTDSL4DataspacesNode (dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode optASTDSL4DataspacesNode)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optASTDSL4DataspacesNode = Optional.ofNullable(optASTDSL4DataspacesNode);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptASTDSL4DataspacesNodeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optASTDSL4DataspacesNode = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope getOptIDSL4DataspacesArtifactScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptIDSL4DataspacesArtifactScope()) {
        return this.optIDSL4DataspacesArtifactScope.get();
    }
    Log.error("0xA7003x62889 get for OptIDSL4DataspacesArtifactScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptIDSL4DataspacesArtifactScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optIDSL4DataspacesArtifactScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptIDSL4DataspacesArtifactScope (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope optIDSL4DataspacesArtifactScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optIDSL4DataspacesArtifactScope = Optional.ofNullable(optIDSL4DataspacesArtifactScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptIDSL4DataspacesArtifactScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optIDSL4DataspacesArtifactScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesGlobalScope getOptIDSL4DataspacesGlobalScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptIDSL4DataspacesGlobalScope()) {
        return this.optIDSL4DataspacesGlobalScope.get();
    }
    Log.error("0xA7003x20839 get for OptIDSL4DataspacesGlobalScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptIDSL4DataspacesGlobalScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optIDSL4DataspacesGlobalScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptIDSL4DataspacesGlobalScope (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesGlobalScope optIDSL4DataspacesGlobalScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optIDSL4DataspacesGlobalScope = Optional.ofNullable(optIDSL4DataspacesGlobalScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptIDSL4DataspacesGlobalScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optIDSL4DataspacesGlobalScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope getOptIDSL4DataspacesScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptIDSL4DataspacesScope()) {
        return this.optIDSL4DataspacesScope.get();
    }
    Log.error("0xA7003x33043 get for OptIDSL4DataspacesScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptIDSL4DataspacesScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optIDSL4DataspacesScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptIDSL4DataspacesScope (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope optIDSL4DataspacesScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optIDSL4DataspacesScope = Optional.ofNullable(optIDSL4DataspacesScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptIDSL4DataspacesScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optIDSL4DataspacesScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesScope getOptDSL4DataspacesScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptDSL4DataspacesScope()) {
        return this.optDSL4DataspacesScope.get();
    }
    Log.error("0xA7003x90147 get for OptDSL4DataspacesScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptDSL4DataspacesScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optDSL4DataspacesScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesScope (dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesScope optDSL4DataspacesScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optDSL4DataspacesScope = Optional.ofNullable(optDSL4DataspacesScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optDSL4DataspacesScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesArtifactScope getOptDSL4DataspacesArtifactScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptDSL4DataspacesArtifactScope()) {
        return this.optDSL4DataspacesArtifactScope.get();
    }
    Log.error("0xA7003x80803 get for OptDSL4DataspacesArtifactScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptDSL4DataspacesArtifactScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optDSL4DataspacesArtifactScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesArtifactScope (dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesArtifactScope optDSL4DataspacesArtifactScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optDSL4DataspacesArtifactScope = Optional.ofNullable(optDSL4DataspacesArtifactScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesArtifactScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optDSL4DataspacesArtifactScope = Optional.empty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesGlobalScope getOptDSL4DataspacesGlobalScope ()

 {
    /* generated by template methods.opt.Get4Opt*/

    if (isPresentOptDSL4DataspacesGlobalScope()) {
        return this.optDSL4DataspacesGlobalScope.get();
    }
    Log.error("0xA7003x53251 get for OptDSL4DataspacesGlobalScope can't return a value. Attribute is empty.");
    // Normally this statement is not reachable
    throw new IllegalStateException();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPresentOptDSL4DataspacesGlobalScope ()

 {
    /* generated by template methods.opt.IsPresent4Opt*/

return this.optDSL4DataspacesGlobalScope.isPresent();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesGlobalScope (dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesGlobalScope optDSL4DataspacesGlobalScope)

 {
    /* generated by template methods.opt.Set4Opt*/

this.optDSL4DataspacesGlobalScope = Optional.ofNullable(optDSL4DataspacesGlobalScope);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setOptDSL4DataspacesGlobalScopeAbsent ()

 {
    /* generated by template methods.opt.SetAbsent*/

this.optDSL4DataspacesGlobalScope = Optional.empty();

}


}


