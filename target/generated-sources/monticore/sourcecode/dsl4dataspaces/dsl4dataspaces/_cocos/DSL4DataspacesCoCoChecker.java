/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._cocos;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class DSL4DataspacesCoCoChecker  {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  DSL4DataspacesCoCoChecker()
 {
  /* generated by template _cocos.CoCoCheckerConstructor*/

  traverser = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.inheritanceTraverser();
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser getTraverser ()

 {
    /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser)

 {
    /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getDSL4DataspacesVisitorList().forEach(s -> traverser.add4DSL4Dataspaces(s));
  checker.getTraverser().getMCJavaLiteralsVisitorList().forEach(s -> traverser.add4MCJavaLiterals(s));
  checker.getTraverser().getMCBasicTypesVisitorList().forEach(s -> traverser.add4MCBasicTypes(s));
  checker.getTraverser().getMCCommonLiteralsVisitorList().forEach(s -> traverser.add4MCCommonLiterals(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTDataSpaceConnectorConfigurationCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTIdentificationDataCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTAssetMetaDataCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTBaseUsageCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTOPCUAUsageCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTEDCUsageCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTEDCPushEndpointsConfigCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTAccessPolicyCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTRoleCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTIdentityProviderConfigCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTOAuthInfoCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTConfigurationElementsCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTUsageCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (dsl4dataspaces.dsl4dataspaces._cocos.DSL4DataspacesASTDSL4DataspacesNodeCoCo coco)

 {
    traverser.add4DSL4Dataspaces(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.literals.mcjavaliterals._cocos.MCJavaLiteralsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCJavaLiteralsVisitorList().forEach(s -> traverser.add4MCJavaLiterals(s));
  checker.getTraverser().getMCCommonLiteralsVisitorList().forEach(s -> traverser.add4MCCommonLiterals(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.literals.mcjavaliterals._ast.ASTMCJavaLiteralsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcjavaliterals._cocos.MCJavaLiteralsASTIntLiteralCoCo coco)

 {
    traverser.add4MCJavaLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcjavaliterals._cocos.MCJavaLiteralsASTLongLiteralCoCo coco)

 {
    traverser.add4MCJavaLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcjavaliterals._cocos.MCJavaLiteralsASTFloatLiteralCoCo coco)

 {
    traverser.add4MCJavaLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcjavaliterals._cocos.MCJavaLiteralsASTDoubleLiteralCoCo coco)

 {
    traverser.add4MCJavaLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcjavaliterals._cocos.MCJavaLiteralsASTMCJavaLiteralsNodeCoCo coco)

 {
    traverser.add4MCJavaLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.types.mcbasictypes._cocos.MCBasicTypesCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCBasicTypesVisitorList().forEach(s -> traverser.add4MCBasicTypes(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.types.mcbasictypes._ast.ASTMCBasicTypesNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedNameCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPackageDeclarationCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCImportStatementCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCPrimitiveTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCQualifiedTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCReturnTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCVoidTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCObjectTypeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.types.mcbasictypes._cocos.MCBasicTypesASTMCBasicTypesNodeCoCo coco)

 {
    traverser.add4MCBasicTypes(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCCommonLiteralsVisitorList().forEach(s -> traverser.add4MCCommonLiterals(s));
  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));
  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.literals.mccommonliterals._ast.ASTMCCommonLiteralsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNullLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBooleanLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTCharLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTStringLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicLongLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicLongLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicFloatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicFloatLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTBasicDoubleLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedBasicDoubleLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTNumericLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTSignedNumericLiteralCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mccommonliterals._cocos.MCCommonLiteralsASTMCCommonLiteralsNodeCoCo coco)

 {
    traverser.add4MCCommonLiterals(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCLiteralsBasisVisitorList().forEach(s -> traverser.add4MCLiteralsBasis(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.literals.mcliteralsbasis._ast.ASTMCLiteralsBasisNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTLiteralCoCo coco)

 {
    traverser.add4MCLiteralsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.literals.mcliteralsbasis._cocos.MCLiteralsBasisASTMCLiteralsBasisNodeCoCo coco)

 {
    traverser.add4MCLiteralsBasis(coco);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addChecker (de.monticore.mcbasics._cocos.MCBasicsCoCoChecker checker)

 {
    /* generated by template _cocos.AddChecker*/


  checker.getTraverser().getMCBasicsVisitorList().forEach(s -> traverser.add4MCBasics(s));

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void checkAll (de.monticore.mcbasics._ast.ASTMCBasicsNode node)

 {
    node.accept(getTraverser());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCoCo (de.monticore.mcbasics._cocos.MCBasicsASTMCBasicsNodeCoCo coco)

 {
    traverser.add4MCBasics(coco);
}


}


