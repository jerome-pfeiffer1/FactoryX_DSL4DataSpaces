/* generated by template parser.Lexer*/

lexer grammar DSL4DataspacesAntlrLexer;

@lexer::header {
  package dsl4dataspaces.dsl4dataspaces._parser;
}

/* generated by template parser.LexerMember*/


@lexer::members {



private DSL4DataspacesAntlrParser _monticore_parser;

protected DSL4DataspacesAntlrParser getCompiler() {
   return _monticore_parser;
}

public void setMCParser(DSL4DataspacesAntlrParser in) {
  this._monticore_parser = in;
}

protected void storeComment(){
  if (getCompiler() != null) {
    de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
    de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine, getCompiler().getFilename());
    _comment.set_SourcePositionStart(startPos);
    _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
    getCompiler().addComment(_comment);
  }
}
}


  QOSMETRICS1685033198 : 'qosMetrics';
  USAGEPOLICY817009203 : 'usagePolicy';
  STSSERVICEADDRESS3595907665 : 'stsServiceAddress';
  CALLBACKADDRESS105567183 : 'callBackAddress';
  USAGE111574433 : 'usage';
  LANGUAGE2681377624 : 'language';
  REGISTRIES2425415067 : 'registries';
  REMOTEID3782084577 : 'remoteID';
  SIDICODES2535023499 : 'sidiCodes';
  PERMISSIONS1133704324 : 'permissions';
  LEXNAME0 : 'connector config';
  MODIFIED3679453897 : 'modified';
  ID3355 : 'id';
  AUTHENTICATIONMODE1705415739 : 'authenticationMode';
  XAPIKEY1063285885 : 'xAPIKey';
  REMOTEADDRESS3662708942 : 'remoteAddress';
  PACKAGE3487904838 : 'package';
  VOID3625364 : 'void';
  IDTYPE3101035253 : 'idType';
  DATAADDRESS1666068714 : 'dataAddress';
  EDC100260 : 'edc';
  CREATED1028554472 : 'created';
  STAR : '*';
  SECURITYMODE808027395 : 'securityMode';
  COMMA : ',';
  MINUS : '-';
  VERSION351608024 : 'version';
  POINT : '.';
  PUSH3452698 : 'push';
  ROLE2552982 : 'Role';
  NULL3392903 : 'null';
  NAME3373707 : 'name';
  PUBLISHER1447404028 : 'publisher';
  COLON : ':';
  SEMI : ';';
  GRANTTYPE3075135094 : 'grantType';
  EQUALS : '=';
  ACCESSCONTROL798502745 : 'accessControl';
  ACCESS2871506276 : 'access';
  IMPORT3110171557 : 'import';
  DESCRIPTION2570421244 : 'description';
  SECRET3388690096 : 'secret';
  TITLE110371416 : 'title';
  URI84300 : 'URI';
  ENDPOINT1741102485 : 'endpoint';
  PROVIDER3307472369 : 'provider';
  IDENTITY4159205566 : 'identity';
  SCOPE109264468 : 'scope';
  LBRACK : '[';
  RBRACK : ']';
  OAUTH105516695 : 'oauth';
  POLICY3312297266 : 'policy';
  USAGE82021761 : 'Usage';
  DATASCHEMAADDRESS258677641 : 'dataSchemaAddress';
  ENDPOINTS2434569598 : 'endpoints';
  CLIENTID908408390 : 'clientId';
  IDPENDPOINT3356463978 : 'idpEndpoint';
  CONTRACTOFFER3767399530 : 'contractOffer';
  SECURITYPOLICY3506346130 : 'securityPolicy';
  SUPPORTEDPROTOCOLS1268839373 : 'supportedProtocols';
  BASEURL3962341598 : 'baseUrl';
  LINKEDASSETID675711922 : 'linkedAssetID';
  DISCOVERY4173759920 : 'discovery';
  CLOUDPUSH3868712687 : 'cloudPush';
  LCURLY : '{';
  ASSET93121264 : 'asset';
  RCURLY : '}';
  CONFIG2940175170 : 'config';
  OPCUA105946286 : 'opcua';
  TRUE3569038 : 'true';
  FALSE97196323 : 'false';
  BOOLEAN64711720 : 'boolean';
  BYTE3039496 : 'byte';
  SHORT109413500 : 'short';
  INT104431 : 'int';
  LONG3327612 : 'long';
  CHAR3052374 : 'char';
  FLOAT97526364 : 'float';
  DOUBLE2969009105 : 'double';
  DE3201 : 'de';
  EN3241 : 'en';
  NL3518 : 'nl';
 

      
 // Start of 'ASTLexProd OctalDigits'
fragment OctalDigits 
      
:
      
       OctalDigit 
      (
      
      (
       OctalDigitOrUnderscore 
      )
*
       OctalDigit 
      )
?
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Digits'
fragment Digits 
      
:
      
       Digit 
      (
      
      (
       DigitOrUnderscore 
      )
*
       Digit 
      )
?
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd OctalNumeral'
fragment OctalNumeral 
      
:
      
      '0' 
      (
       Underscores 
      )
?
       OctalDigits 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd String'
String 
      
:
      
      '"' 
      (
      
       StringCharacters 
      )
?
      '"' 
      {setText(getText().substring(1,getText().length() - 1));

};
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Num_Int'
Num_Int 
      
:
      
       DecimalIntegerLiteral 
      |
       HexIntegerLiteral 
      |
       OctalIntegerLiteral 
      |
       BinaryIntegerLiteral 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Name'
Name 
      
:
      
      (
      
      'a'..'z'  
      |
      'A'..'Z'  
      |
      '_' 
      |
      '$' 
      )

      (
      
      'a'..'z'  
      |
      'A'..'Z'  
      |
      '_' 
      |
      '0'..'9'  
      |
      '$' 
      )
*
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexNumeral'
fragment HexNumeral 
      
:
      
      '0' 
      (
      
      'x' 
      |
      'X' 
      )

       HexDigits 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd BinaryIntegerLiteral'
fragment BinaryIntegerLiteral 
      
:
      
       BinaryNumeral 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd BinaryNumeral'
fragment BinaryNumeral 
      
:
      
      '0' 
      (
      
      'b' 
      |
      'B' 
      )

       BinaryDigits 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Underscores'
fragment Underscores 
      
:
      
      (
      '_' 
      )
+
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd SingleCharacter'
fragment SingleCharacter 
      
:
      
      ~(
      
      '\'' 
      )

      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd NonZeroDigit'
fragment NonZeroDigit 
      
:
      
      '1'..'9'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd NEWLINE'
fragment NEWLINE 
      
:
      
      (
      
      '\r' 
      '\n' 
      |
      '\r' 
      |
      '\n' 
      )

      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexDigit'
fragment HexDigit 
      
:
      
      '0'..'9'  
      |
      'a'..'f'  
      |
      'A'..'F'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd DecimalIntegerLiteral'
fragment DecimalIntegerLiteral 
      
:
      
       DecimalNumeral 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd SignedInteger'
fragment SignedInteger 
      
:
      
      (
       Sign 
      )
?
       Digits 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd StringCharacter'
fragment StringCharacter 
      
:
      
      ~(
      
      '"' 
      |
      '\\' 
      )

      |
       EscapeSequence 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexIntegerLiteral'
fragment HexIntegerLiteral 
      
:
      
       HexNumeral 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd BinaryDigit'
fragment BinaryDigit 
      
:
      
      '0' 
      |
      '1' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Num_Double'
Num_Double 
      
:
      
       DecimalDoublePointLiteral 
      |
       HexadecimalDoublePointLiteral 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd ZeroToThree'
fragment ZeroToThree 
      
:
      
      '0'..'3'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd BinaryExponentIndicator'
fragment BinaryExponentIndicator 
      
:
      
      'p' 
      |
      'P' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd OctalEscape'
fragment OctalEscape 
      
:
      
      '\\' 
       OctalDigit 
      |
      '\\' 
       OctalDigit 
       OctalDigit 
      |
      '\\' 
       ZeroToThree 
       OctalDigit 
       OctalDigit 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexDigits'
fragment HexDigits 
      
:
      
       HexDigit 
      (
      
      (
       HexDigitOrUnderscore 
      )
*
       HexDigit 
      )
?
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd ExponentIndicator'
fragment ExponentIndicator 
      
:
      
      'e' 
      |
      'E' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexadecimalDoublePointLiteral'
fragment HexadecimalDoublePointLiteral 
      
:
      
       HexSignificand 
       BinaryExponent 
      (
       DoubleTypeSuffix 
      )
?
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd IntegerTypeSuffix'
fragment IntegerTypeSuffix 
      
:
      
      'l' 
      |
      'L' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd ExponentPart'
fragment ExponentPart 
      
:
      
       ExponentIndicator 
       SignedInteger 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Char'
Char 
      
:
      
      '\'' 
      (
      
       SingleCharacter 
      |
       EscapeSequence 
      )

      '\'' 
      {setText(getText().substring(1,getText().length() - 1));

};
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd BinaryDigits'
fragment BinaryDigits 
      
:
      
       BinaryDigit 
      (
      
      (
       BinaryDigitOrUnderscore 
      )
*
       BinaryDigit 
      )
?
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Num_Float'
Num_Float 
      
:
      
       DecimalFloatingPointLiteral 
      |
       HexadecimalFloatingPointLiteral 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd FloatTypeSuffix'
fragment FloatTypeSuffix 
      
:
      
      'f' 
      |
      'F' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd WS'
WS 
      
:
      
      (
      
      ' ' 
      |
      '\t' 
      |
      '\r' 
      |
      '\n' 
      )

      ->skip;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd UnicodeEscape'
fragment UnicodeEscape 
      
:
      
      '\\' 
      'u' 
       HexDigit 
       HexDigit 
       HexDigit 
       HexDigit 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd DoubleTypeSuffix'
fragment DoubleTypeSuffix 
      
:
      
      'd' 
      |
      'D' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd OctalIntegerLiteral'
fragment OctalIntegerLiteral 
      
:
      
       OctalNumeral 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Digit'
fragment Digit 
      
:
      
      '0' 
      |
       NonZeroDigit 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd OctalDigit'
fragment OctalDigit 
      
:
      
      '0'..'7'  
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd StringCharacters'
fragment StringCharacters 
      
:
      
      (
      
       StringCharacter 
      )
+
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Num_Long'
Num_Long 
      
:
      
       DecimalIntegerLiteral 
       IntegerTypeSuffix 
      |
       HexIntegerLiteral 
       IntegerTypeSuffix 
      |
       OctalIntegerLiteral 
       IntegerTypeSuffix 
      |
       BinaryIntegerLiteral 
       IntegerTypeSuffix 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd DecimalNumeral'
fragment DecimalNumeral 
      
:
      
      '0' 
      |
       NonZeroDigit 
      (
      
      (
       Digits 
      )
?
      |
       Underscores 
       Digits 
      )

      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd EscapeSequence'
fragment EscapeSequence 
      
:
      
      '\\' 
      (
      
      'b' 
      |
      't' 
      |
      'n' 
      |
      'f' 
      |
      'r' 
      |
      '"' 
      |
      '\'' 
      |
      '\\' 
      )

      |
       OctalEscape 
      |
       UnicodeEscape 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd OctalDigitOrUnderscore'
fragment OctalDigitOrUnderscore 
      
:
      
       OctalDigit 
      |
      '_' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexadecimalFloatingPointLiteral'
fragment HexadecimalFloatingPointLiteral 
      
:
      
       HexSignificand 
       BinaryExponent 
       FloatTypeSuffix 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd DecimalFloatingPointLiteral'
fragment DecimalFloatingPointLiteral 
      
:
      
       Digits 
      '.' 
      (
       Digits 
      )
?
      (
       ExponentPart 
      )
?
       FloatTypeSuffix 
      |
      '.' 
       Digits 
      (
       ExponentPart 
      )
?
       FloatTypeSuffix 
      |
       Digits 
       ExponentPart 
       FloatTypeSuffix 
      |
       Digits 
       FloatTypeSuffix 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd BinaryExponent'
fragment BinaryExponent 
      
:
      
       BinaryExponentIndicator 
       SignedInteger 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd DigitOrUnderscore'
fragment DigitOrUnderscore 
      
:
      
       Digit 
      |
      '_' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexSignificand'
fragment HexSignificand 
      
:
      
       HexNumeral 
      (
      '.' 
      )
?
      |
      '0' 
      (
      
      'x' 
      |
      'X' 
      )

      (
       HexDigits 
      )
?
      '.' 
       HexDigits 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd DecimalDoublePointLiteral'
fragment DecimalDoublePointLiteral 
      
:
      
       Digits 
      '.' 
      (
       Digits 
      )
?
      (
       ExponentPart 
      )
?
      (
       DoubleTypeSuffix 
      )
?
      |
      '.' 
       Digits 
      (
       ExponentPart 
      )
?
      (
       DoubleTypeSuffix 
      )
?
      |
       Digits 
       ExponentPart 
      (
       DoubleTypeSuffix 
      )
?
      |
       Digits 
       DoubleTypeSuffix 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd HexDigitOrUnderscore'
fragment HexDigitOrUnderscore 
      
:
      
       HexDigit 
      |
      '_' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd ML_COMMENT'
ML_COMMENT 
      
:
      
      '/*' 
      (
      .
      )
*
      ?
      '*/' 
      {storeComment();

}->skip;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd BinaryDigitOrUnderscore'
fragment BinaryDigitOrUnderscore 
      
:
      
       BinaryDigit 
      |
      '_' 
      ;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd SL_COMMENT'
SL_COMMENT 
      
:
      
      '//' 
      (
      
      ~(
      
      '\n' 
      |
      '\r' 
      )

      )
*
      {storeComment();

}->skip;
// End of 'ASTLexProd'

      
 // Start of 'ASTLexProd Sign'
fragment Sign 
      
:
      
      '+' 
      |
      '-' 
      ;
// End of 'ASTLexProd'


