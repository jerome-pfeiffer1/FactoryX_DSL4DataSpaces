/* generated by template parser.Parser*/


/* generated by template parser.ParserHeader*/

parser grammar DSL4DataspacesAntlrParser;
@parser::header {
package dsl4dataspaces.dsl4dataspaces._parser;
import de.monticore.antlr4.*;
import de.monticore.parser.*;
import dsl4dataspaces.dsl4dataspaces.*;
}

options {
  superClass=MCParser;
  tokenVocab=DSL4DataspacesAntlrLexer;
}

@parser::members

{

  // convert function for Name
private String convertName(Token t)  {
    return t.getText();
}

  // convert function for NEWLINE
private String convertNEWLINE(Token t)  {
    return t.getText();
}

  // convert function for WS
private String convertWS(Token t)  {
    return t.getText();
}

  // convert function for SL_COMMENT
private String convertSL_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for ML_COMMENT
private String convertML_COMMENT(Token t)  {
    return t.getText();
}

  // convert function for Digits
private String convertDigits(Token t)  {
    return t.getText();
}

  // convert function for Digit
private String convertDigit(Token t)  {
    return t.getText();
}

  // convert function for Char
private String convertChar(Token t)  {
    return t.getText();
}

  // convert function for SingleCharacter
private String convertSingleCharacter(Token t)  {
    return t.getText();
}

  // convert function for String
private String convertString(Token t)  {
    return t.getText();
}

  // convert function for StringCharacters
private String convertStringCharacters(Token t)  {
    return t.getText();
}

  // convert function for StringCharacter
private String convertStringCharacter(Token t)  {
    return t.getText();
}

  // convert function for EscapeSequence
private String convertEscapeSequence(Token t)  {
    return t.getText();
}

  // convert function for OctalEscape
private String convertOctalEscape(Token t)  {
    return t.getText();
}

  // convert function for UnicodeEscape
private String convertUnicodeEscape(Token t)  {
    return t.getText();
}

  // convert function for ZeroToThree
private String convertZeroToThree(Token t)  {
    return t.getText();
}

  // convert function for HexDigit
private String convertHexDigit(Token t)  {
    return t.getText();
}

  // convert function for OctalDigit
private String convertOctalDigit(Token t)  {
    return t.getText();
}

  // convert function for Num_Int
private String convertNum_Int(Token t)  {
    return t.getText();
}

  // convert function for Num_Long
private String convertNum_Long(Token t)  {
    return t.getText();
}

  // convert function for DecimalIntegerLiteral
private String convertDecimalIntegerLiteral(Token t)  {
    return t.getText();
}

  // convert function for HexIntegerLiteral
private String convertHexIntegerLiteral(Token t)  {
    return t.getText();
}

  // convert function for OctalIntegerLiteral
private String convertOctalIntegerLiteral(Token t)  {
    return t.getText();
}

  // convert function for BinaryIntegerLiteral
private String convertBinaryIntegerLiteral(Token t)  {
    return t.getText();
}

  // convert function for IntegerTypeSuffix
private String convertIntegerTypeSuffix(Token t)  {
    return t.getText();
}

  // convert function for DecimalNumeral
private String convertDecimalNumeral(Token t)  {
    return t.getText();
}

  // convert function for NonZeroDigit
private String convertNonZeroDigit(Token t)  {
    return t.getText();
}

  // convert function for DigitOrUnderscore
private String convertDigitOrUnderscore(Token t)  {
    return t.getText();
}

  // convert function for Underscores
private String convertUnderscores(Token t)  {
    return t.getText();
}

  // convert function for HexNumeral
private String convertHexNumeral(Token t)  {
    return t.getText();
}

  // convert function for HexDigits
private String convertHexDigits(Token t)  {
    return t.getText();
}

  // convert function for HexDigitOrUnderscore
private String convertHexDigitOrUnderscore(Token t)  {
    return t.getText();
}

  // convert function for OctalNumeral
private String convertOctalNumeral(Token t)  {
    return t.getText();
}

  // convert function for OctalDigits
private String convertOctalDigits(Token t)  {
    return t.getText();
}

  // convert function for OctalDigitOrUnderscore
private String convertOctalDigitOrUnderscore(Token t)  {
    return t.getText();
}

  // convert function for BinaryNumeral
private String convertBinaryNumeral(Token t)  {
    return t.getText();
}

  // convert function for BinaryDigits
private String convertBinaryDigits(Token t)  {
    return t.getText();
}

  // convert function for BinaryDigit
private String convertBinaryDigit(Token t)  {
    return t.getText();
}

  // convert function for BinaryDigitOrUnderscore
private String convertBinaryDigitOrUnderscore(Token t)  {
    return t.getText();
}

  // convert function for Num_Float
private String convertNum_Float(Token t)  {
    return t.getText();
}

  // convert function for Num_Double
private String convertNum_Double(Token t)  {
    return t.getText();
}

  // convert function for DecimalDoublePointLiteral
private String convertDecimalDoublePointLiteral(Token t)  {
    return t.getText();
}

  // convert function for DecimalFloatingPointLiteral
private String convertDecimalFloatingPointLiteral(Token t)  {
    return t.getText();
}

  // convert function for ExponentPart
private String convertExponentPart(Token t)  {
    return t.getText();
}

  // convert function for ExponentIndicator
private String convertExponentIndicator(Token t)  {
    return t.getText();
}

  // convert function for SignedInteger
private String convertSignedInteger(Token t)  {
    return t.getText();
}

  // convert function for Sign
private String convertSign(Token t)  {
    return t.getText();
}

  // convert function for FloatTypeSuffix
private String convertFloatTypeSuffix(Token t)  {
    return t.getText();
}

  // convert function for DoubleTypeSuffix
private String convertDoubleTypeSuffix(Token t)  {
    return t.getText();
}

  // convert function for HexadecimalDoublePointLiteral
private String convertHexadecimalDoublePointLiteral(Token t)  {
    return t.getText();
}

  // convert function for HexadecimalFloatingPointLiteral
private String convertHexadecimalFloatingPointLiteral(Token t)  {
    return t.getText();
}

  // convert function for HexSignificand
private String convertHexSignificand(Token t)  {
    return t.getText();
}

  // convert function for BinaryExponent
private String convertBinaryExponent(Token t)  {
    return t.getText();
}

  // convert function for BinaryExponentIndicator
private String convertBinaryExponentIndicator(Token t)  {
    return t.getText();
}

}

  
 // Start of 'ASTClassProd NullLiteral'
nullLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNullLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNullLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.nullLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal null'
NULL3392903
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BooleanLiteral'
booleanLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBooleanLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.booleanLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTConstantGroup'
('true'{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.TRUE);
}|
'false'{
_builder.setSource(de.monticore.literals.mccommonliterals._ast.ASTConstantsMCCommonLiterals.FALSE);
})// End of 'ASTConstantGroup'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd CharLiteral'
charLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTCharLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTCharLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.charLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Char{_builder.setSource(convertChar($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd StringLiteral'
stringLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTStringLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTStringLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.stringLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=String{_builder.setSource(convertString($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd NatLiteral'
natLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTNatLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.natLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedNatLiteral'
signedNatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedNatLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.signedNatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2)}?
  (
  
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  
)
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  |
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicLongLiteral'
basicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicLongLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.basicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicLongLiteral'
signedBasicLongLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicLongLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.signedBasicLongLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(3,"l","L") && noSpace(2,3)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setDigits(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  |
  {cmpToken(2,"l","L") && noSpace(2)}?
  (tmp1=Digits{_builder.setDigits(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal l'
((nokeyword_l108 | nokeyword_L76))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicFloatLiteral'
basicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicFloatLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.basicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicFloatLiteral'
signedBasicFloatLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicFloatLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.signedBasicFloatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {cmpToken(5,"f","F") && noSpace(2,3,4,5)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  |
  {cmpToken(4,"f","F") && noSpace(2,3,4)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  
 // Start of 'ASTKeyTerminal f'
((nokeyword_f102 | nokeyword_F70))// End of 'ASTKeyTerminal'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BasicDoubleLiteral'
basicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTBasicDoubleLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.basicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3)}?
  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd SignedBasicDoubleLiteral'
signedBasicDoubleLiteral returns [de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mccommonliterals._ast.ASTSignedBasicDoubleLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.signedBasicDoubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  {noSpace(2,3,4)}?
  
 // Start of 'ASTConstantGroup'
(MINUS{
_builder.setNegative(true);
})// End of 'ASTConstantGroup'

  (tmp0=Digits{_builder.setPre(convertDigits($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Digits{_builder.setPost(convertDigits($tmp1));}

  ) 
  
  |
  {noSpace(2,3)}?
  (tmp2=Digits{_builder.setPre(convertDigits($tmp2));}

  ) 
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp3=Digits{_builder.setPost(convertDigits($tmp3));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd IntLiteral'
intLiteral returns [de.monticore.literals.mcjavaliterals._ast.ASTIntLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mcjavaliterals._ast.ASTIntLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.intLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Num_Int{_builder.setSource(convertNum_Int($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd LongLiteral'
longLiteral returns [de.monticore.literals.mcjavaliterals._ast.ASTLongLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mcjavaliterals._ast.ASTLongLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.longLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Num_Long{_builder.setSource(convertNum_Long($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd FloatLiteral'
floatLiteral returns [de.monticore.literals.mcjavaliterals._ast.ASTFloatLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mcjavaliterals._ast.ASTFloatLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.floatLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Num_Float{_builder.setSource(convertNum_Float($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd DoubleLiteral'
doubleLiteral returns [de.monticore.literals.mcjavaliterals._ast.ASTDoubleLiteral ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.literals.mcjavaliterals._ast.ASTDoubleLiteralBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.doubleLiteralBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Num_Double{_builder.setSource(convertNum_Double($tmp0));}

  ) 
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCQualifiedName'
mCQualifiedName returns [de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCQualifiedNameBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.mCQualifiedNameBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (
  
  (tmp0=Name{ addToIteratedAttributeIfNotNull(_builder.getPartsList(), convertName($tmp0));}

  ) 
  
  (
  
  
 // Start of 'ASTTerminal .'
POINT
  (tmp1=Name{ addToIteratedAttributeIfNotNull(_builder.getPartsList(), convertName($tmp1));}

  ) 
  
  
)*
  
)
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCPackageDeclaration'
mCPackageDeclaration returns [de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclaration ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCPackageDeclarationBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.mCPackageDeclarationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal package'
PACKAGE3487904838
   tmp0=mCQualifiedName{_builder.setMCQualifiedName(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCImportStatement'
mCImportStatement returns [de.monticore.types.mcbasictypes._ast.ASTMCImportStatement ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCImportStatementBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.mCImportStatementBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal import'
IMPORT3110171557
   tmp0=mCQualifiedName{_builder.setMCQualifiedName(_localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal .'
POINT
  
 // Start of 'ASTConstantGroup'
(STAR{
_builder.setStar(true);
})// End of 'ASTConstantGroup'

  
)?
  
 // Start of 'ASTTerminal ;'
SEMI
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCPrimitiveType'
mCPrimitiveType returns [de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCPrimitiveTypeBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.mCPrimitiveTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTConstantGroup'
('boolean'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.BOOLEAN);
}|
'byte'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.BYTE);
}|
'short'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.SHORT);
}|
'int'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.INT);
}|
'long'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.LONG);
}|
'char'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.CHAR);
}|
'float'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.FLOAT);
}|
'double'{
_builder.setPrimitive(de.monticore.types.mcbasictypes._ast.ASTConstantsMCBasicTypes.DOUBLE);
})// End of 'ASTConstantGroup'

  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCQualifiedType'
mCQualifiedType returns [de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCQualifiedTypeBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.mCQualifiedTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
   tmp0=mCQualifiedName{_builder.setMCQualifiedName(_localctx.tmp0.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCReturnType'
mCReturnType returns [de.monticore.types.mcbasictypes._ast.ASTMCReturnType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCReturnTypeBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.mCReturnTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
   tmp0=mCVoidType{_builder.setMCVoidType(_localctx.tmp0.ret);}  
  
  |
   tmp1=mCType{_builder.setMCType(_localctx.tmp1.ret);}  
  
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd MCVoidType'
mCVoidType returns [de.monticore.types.mcbasictypes._ast.ASTMCVoidType ret = null]
@init{// getActionForAltBeforeRuleBody
de.monticore.types.mcbasictypes._ast.ASTMCVoidTypeBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.mCVoidTypeBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal void'
VOID3625364
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd DataSpaceConnectorConfiguration'
dataSpaceConnectorConfiguration returns [dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfigurationBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.dataSpaceConnectorConfigurationBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal connector config'
LEXNAME0
  (tmp0=Name{_builder.setName(convertName($tmp0));}

  ) 
  
  
 // Start of 'ASTTerminal {'
LCURLY
  ( tmp1=configurationElements{addToIteratedAttributeIfNotNull(_builder.getConfigurationElementsList(), _localctx.tmp1.ret);}) + 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd ComplexName'
complexName returns [dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTComplexNameBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.complexNameBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  (tmp0=Name{ addToIteratedAttributeIfNotNull(_builder.getNameList(), convertName($tmp0));}

  ) 
  
  (
  
  
 // Start of 'ASTTerminal -'
MINUS
  (tmp1=Name{ addToIteratedAttributeIfNotNull(_builder.getNameList(), convertName($tmp1));}

  ) 
  
  
)*
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd DiscoveryData'
discoveryData returns [dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryDataBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.discoveryDataBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal discovery'
DISCOVERY4173759920
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal linkedAssetID'
LINKEDASSETID675711922
   tmp0=complexName{_builder.setAssetID(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal baseUrl'
BASEURL3962341598
   tmp1=stringLiteral{_builder.setBaseUrl(_localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal endpoint'
ENDPOINT1741102485
   tmp2=stringLiteral{_builder.setEndpoint(_localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal idType'
IDTYPE3101035253
  
 // Start of 'ASTConstantGroup'
(URI84300{
_builder.setIdType(true);
})// End of 'ASTConstantGroup'

  
 // Start of 'ASTTerminal ;'
SEMI
   tmp3=assetMetaData{_builder.setAssetMetaData(_localctx.tmp3.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd AssetMetaData'
assetMetaData returns [dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaDataBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.assetMetaDataBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal asset'
ASSET93121264
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal title'
TITLE110371416
  ( tmp0=complexName{addToIteratedAttributeIfNotNull(_builder.getTitleList(), _localctx.tmp0.ret);}) + 
  
  
 // Start of 'ASTTerminal ;'
SEMI
  (
  
  
 // Start of 'ASTTerminal description'
DESCRIPTION2570421244
   tmp1=stringLiteral{_builder.setDescription(_localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
)?
  
 // Start of 'ASTTerminal publisher'
PUBLISHER1447404028
  (tmp2=Name{ addToIteratedAttributeIfNotNull(_builder.getPublisherList(), convertName($tmp2));}

  ) +
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal sidiCodes'
SIDICODES2535023499
  
 // Start of 'ASTTerminal ['
LBRACK
  (
  
   tmp3=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp3.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp4=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp4.ret);}  
  
  
)*
  
)?
  
 // Start of 'ASTTerminal ]'
RBRACK
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal version'
VERSION351608024
   tmp5=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp5.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal created'
CREATED1028554472
   tmp6=stringLiteral{_builder.setCreated(_localctx.tmp6.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal modified'
MODIFIED3679453897
   tmp7=stringLiteral{_builder.setModified(_localctx.tmp7.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal language'
LANGUAGE2681377624
  
 // Start of 'ASTConstantGroup'
('de'{
_builder.setLanguage(dsl4dataspaces.dsl4dataspaces._ast.ASTConstantsDSL4Dataspaces.DE);
}|
'en'{
_builder.setLanguage(dsl4dataspaces.dsl4dataspaces._ast.ASTConstantsDSL4Dataspaces.EN);
}|
'nl'{
_builder.setLanguage(dsl4dataspaces.dsl4dataspaces._ast.ASTConstantsDSL4Dataspaces.NL);
})// End of 'ASTConstantGroup'

  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd BaseUsage'
baseUsage returns [dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsageBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.baseUsageBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal Usage'
USAGE82021761
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal baseUrl'
BASEURL3962341598
   tmp0=stringLiteral{_builder.setBaseUrl(_localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal endpoint'
ENDPOINT1741102485
   tmp1=stringLiteral{_builder.setEndpoint(_localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal dataAddress'
DATAADDRESS1666068714
   tmp2=stringLiteral{_builder.setDataAddress(_localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal dataSchemaAddress'
DATASCHEMAADDRESS258677641
   tmp3=stringLiteral{_builder.setSchemaAddress(_localctx.tmp3.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
   tmp4=accessPolicy{_builder.setAccessPolicy(_localctx.tmp4.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd OPCUAUsage'
oPCUAUsage returns [dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsageBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.oPCUAUsageBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal opcua'
OPCUA105946286
  
 // Start of 'ASTTerminal usage'
USAGE111574433
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal supportedProtocols'
SUPPORTEDPROTOCOLS1268839373
  
 // Start of 'ASTTerminal ['
LBRACK
  (
  
   tmp0=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp0.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp1=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp1.ret);}  
  
  
)*
  
)?
  
 // Start of 'ASTTerminal ]'
RBRACK
  
 // Start of 'ASTTerminal ;'
SEMI
  (
  
  
 // Start of 'ASTTerminal qosMetrics'
QOSMETRICS1685033198
  
 // Start of 'ASTTerminal ['
LBRACK
  (
  
   tmp2=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp2.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp3=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp3.ret);}  
  
  
)*
  
)?
  
 // Start of 'ASTTerminal ]'
RBRACK
  
 // Start of 'ASTTerminal ;'
SEMI
  
)?
  
 // Start of 'ASTTerminal securityPolicy'
SECURITYPOLICY3506346130
   tmp4=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp4.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal securityMode'
SECURITYMODE808027395
   tmp5=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp5.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal authenticationMode'
AUTHENTICATIONMODE1705415739
   tmp6=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp6.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
   tmp7=accessPolicy{_builder.setAccessPolicy(_localctx.tmp7.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd EDCUsage'
eDCUsage returns [dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsageBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.eDCUsageBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal edc'
EDC100260
  
 // Start of 'ASTTerminal usage'
USAGE111574433
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal remoteAddress'
REMOTEADDRESS3662708942
   tmp0=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal remoteID'
REMOTEID3782084577
  (
  
  (tmp1=Name{ addToIteratedAttributeIfNotNull(_builder.getNameList(), convertName($tmp1));}

  ) 
  
  (
  
  
 // Start of 'ASTTerminal :'
COLON
  (tmp2=Name{ addToIteratedAttributeIfNotNull(_builder.getNameList(), convertName($tmp2));}

  ) 
  
  
)*
  
)
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal xAPIKey'
XAPIKEY1063285885
   tmp3=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp3.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal stsServiceAddress'
STSSERVICEADDRESS3595907665
   tmp4=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp4.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal registries'
REGISTRIES2425415067
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp5=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp5.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp6=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp6.ret);}  
  
  
)*
  
)?
  
 // Start of 'ASTTerminal }'
RCURLY
  
 // Start of 'ASTTerminal ;'
SEMI
   tmp7=eDCPushEndpointsConfig{_builder.setEDCPushEndpointsConfig(_localctx.tmp7.ret);}  
  
   tmp8=accessPolicy{_builder.setAccessPolicy(_localctx.tmp8.ret);}  
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd EDCPushEndpointsConfig'
eDCPushEndpointsConfig returns [dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfigBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.eDCPushEndpointsConfigBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal push'
PUSH3452698
  
 // Start of 'ASTTerminal endpoints'
ENDPOINTS2434569598
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal cloudPush'
CLOUDPUSH3868712687
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
   tmp0=complexName{addToIteratedAttributeIfNotNull(_builder.getComplexNameList(), _localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp1=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp1.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp2=complexName{addToIteratedAttributeIfNotNull(_builder.getComplexNameList(), _localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp3=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp3.ret);}  
  
  
)*
  
)?
  
 // Start of 'ASTTerminal }'
RCURLY
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal callBackAddress'
CALLBACKADDRESS105567183
   tmp4=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp4.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd AccessPolicy'
accessPolicy returns [dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicyBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.accessPolicyBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal access'
ACCESS2871506276
  
 // Start of 'ASTTerminal policy'
POLICY3312297266
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal usagePolicy'
USAGEPOLICY817009203
   tmp0=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal contractOffer'
CONTRACTOFFER3767399530
  
 // Start of 'ASTTerminal {'
LCURLY
  (
  
  (tmp1=Name{ addToIteratedAttributeIfNotNull(_builder.getNameList(), convertName($tmp1));}

  ) 
  
  
 // Start of 'ASTTerminal ='
EQUALS
   tmp2=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp2.ret);}  
  
  |
  
 // Start of 'ASTTerminal ,'
COMMA
  
)+
  
 // Start of 'ASTTerminal }'
RCURLY
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal accessControl'
ACCESSCONTROL798502745
  
 // Start of 'ASTTerminal ['
LBRACK
   tmp3=role{addToIteratedAttributeIfNotNull(_builder.getRoleList(), _localctx.tmp3.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp4=role{addToIteratedAttributeIfNotNull(_builder.getRoleList(), _localctx.tmp4.ret);}  
  
  
)*
  
 // Start of 'ASTTerminal ]'
RBRACK
  
 // Start of 'ASTTerminal ;'
SEMI
  ( tmp5=identityProviderConfig{_builder.setIdentityProviderConfig(_localctx.tmp5.ret);}) ? 
  
  ( tmp6=oAuthInfo{_builder.setOAuthInfo(_localctx.tmp6.ret);}) ? 
  
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd Role'
role returns [dsl4dataspaces.dsl4dataspaces._ast.ASTRole ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTRoleBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.roleBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal Role'
ROLE2552982
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal name'
NAME3373707
   tmp0=complexName{addToIteratedAttributeIfNotNull(_builder.getComplexNameList(), _localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal permissions'
PERMISSIONS1133704324
  
 // Start of 'ASTTerminal ['
LBRACK
  (
  
   tmp1=complexName{addToIteratedAttributeIfNotNull(_builder.getComplexNameList(), _localctx.tmp1.ret);}  
  
  (
  
  
 // Start of 'ASTTerminal ,'
COMMA
   tmp2=complexName{addToIteratedAttributeIfNotNull(_builder.getComplexNameList(), _localctx.tmp2.ret);}  
  
  
)*
  
)?
  
 // Start of 'ASTTerminal ]'
RBRACK
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd IdentityProviderConfig'
identityProviderConfig returns [dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfigBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.identityProviderConfigBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal identity'
IDENTITY4159205566
  
 // Start of 'ASTTerminal provider'
PROVIDER3307472369
  
 // Start of 'ASTTerminal config'
CONFIG2940175170
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal idpEndpoint'
IDPENDPOINT3356463978
   tmp0=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal clientId'
CLIENTID908408390
   tmp1=complexName{addToIteratedAttributeIfNotNull(_builder.getComplexNameList(), _localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal secret'
SECRET3388690096
   tmp2=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal grantType'
GRANTTYPE3075135094
   tmp3=complexName{addToIteratedAttributeIfNotNull(_builder.getComplexNameList(), _localctx.tmp3.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'

  
 // Start of 'ASTClassProd OAuthInfo'
oAuthInfo returns [dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo ret = null]
@init{// getActionForAltBeforeRuleBody
dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfoBuilder _builder = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.oAuthInfoBuilder();
_builder.set_SourcePositionStart( computeStartPosition(_input.LT(1)));
setActiveBuilder(_builder);
}
@after{_builder.set_SourcePositionEnd(computeEndPosition(_input.LT(-1)));
_localctx.ret = _builder.uncheckedBuild();}
  
 : 
  
  
 // Start of 'ASTTerminal oauth'
OAUTH105516695
  
 // Start of 'ASTTerminal {'
LCURLY
  
 // Start of 'ASTTerminal id'
ID3355
   tmp0=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp0.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal secret'
SECRET3388690096
   tmp1=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp1.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal grantType'
GRANTTYPE3075135094
   tmp2=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp2.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal scope'
SCOPE109264468
   tmp3=stringLiteral{addToIteratedAttributeIfNotNull(_builder.getStringLiteralList(), _localctx.tmp3.ret);}  
  
  
 // Start of 'ASTTerminal ;'
SEMI
  
 // Start of 'ASTTerminal }'
RCURLY
  ;
  // End of 'ASTClassProd'


  literal
   returns [de.monticore.literals.mcliteralsbasis._ast.ASTLiteral ret]
  : 
  
  tmp4=numericLiteral
{$ret=$tmp4.ret;}
  |
  tmp5=nullLiteral
{$ret=$tmp5.ret;}
  |
  tmp6=booleanLiteral
{$ret=$tmp6.ret;}
  |
  tmp7=charLiteral
{$ret=$tmp7.ret;}
  |
  tmp8=stringLiteral
{$ret=$tmp8.ret;}
  ;
  signedLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedLiteral ret]
  : 
  
  tmp9=signedNumericLiteral
{$ret=$tmp9.ret;}
  |
  tmp5=nullLiteral
{$ret=$tmp5.ret;}
  |
  tmp6=booleanLiteral
{$ret=$tmp6.ret;}
  |
  tmp7=charLiteral
{$ret=$tmp7.ret;}
  |
  tmp8=stringLiteral
{$ret=$tmp8.ret;}
  ;
  numericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTNumericLiteral ret]
  : 
  
  tmp10=intLiteral
{$ret=$tmp10.ret;}
  |
  tmp11=floatLiteral
{$ret=$tmp11.ret;}
  |
  tmp12=doubleLiteral
{$ret=$tmp12.ret;}
  |
  tmp13=longLiteral
{$ret=$tmp13.ret;}
  |
  tmp14=natLiteral
{$ret=$tmp14.ret;}
  |
  tmp15=basicLongLiteral
{$ret=$tmp15.ret;}
  |
  tmp16=basicFloatLiteral
{$ret=$tmp16.ret;}
  |
  tmp17=basicDoubleLiteral
{$ret=$tmp17.ret;}
  ;
  signedNumericLiteral
   returns [de.monticore.literals.mccommonliterals._ast.ASTSignedNumericLiteral ret]
  : 
  
  tmp18=signedNatLiteral
{$ret=$tmp18.ret;}
  |
  tmp19=signedBasicLongLiteral
{$ret=$tmp19.ret;}
  |
  tmp20=signedBasicFloatLiteral
{$ret=$tmp20.ret;}
  |
  tmp21=signedBasicDoubleLiteral
{$ret=$tmp21.ret;}
  ;
  mCType
   returns [de.monticore.types.mcbasictypes._ast.ASTMCType ret]
  : 
  
  tmp22=mCPrimitiveType
{$ret=$tmp22.ret;}
  |
  tmp23=mCObjectType
{$ret=$tmp23.ret;}
  ;
  mCObjectType
   returns [de.monticore.types.mcbasictypes._ast.ASTMCObjectType ret]
  : 
  
  tmp24=mCQualifiedType
{$ret=$tmp24.ret;}
  ;
  configurationElements
   returns [dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements ret]
  : 
  
  tmp25=discoveryData
{$ret=$tmp25.ret;}
  |
  tmp26=oAuthInfo
{$ret=$tmp26.ret;}
  |
  tmp27=usage
{$ret=$tmp27.ret;}
  ;
  usage
   returns [dsl4dataspaces.dsl4dataspaces._ast.ASTUsage ret]
  : 
  
  tmp28=baseUsage
{$ret=$tmp28.ret;}
  |
  tmp29=oPCUAUsage
{$ret=$tmp29.ret;}
  |
  tmp30=eDCUsage
{$ret=$tmp30.ret;}
  ;

  nokeyword_f102 : {next("f")}? Name;
  nokeyword_F70 : {next("F")}? Name;
  nokeyword_l108 : {next("l")}? Name;
  nokeyword_L76 : {next("L")}? Name;


