/* generated by template parser.EmptyParserInfo*/

package dsl4dataspaces.dsl4dataspaces._parser;

import java.util.*;
import dsl4dataspaces.dsl4dataspaces._parser._auxiliary.DSL4DataspacesParserInfoForMCBasicTypes;
import dsl4dataspaces.dsl4dataspaces._parser._auxiliary.DSL4DataspacesParserInfoForMCJavaLiterals;
import dsl4dataspaces.dsl4dataspaces._parser._auxiliary.DSL4DataspacesParserInfoForMCBasics;
import dsl4dataspaces.dsl4dataspaces._parser._auxiliary.DSL4DataspacesParserInfoForMCCommonLiterals;
import dsl4dataspaces.dsl4dataspaces._parser._auxiliary.DSL4DataspacesParserInfoForMCLiteralsBasis;
import de.monticore.types.mcbasictypes._parser.MCBasicTypesParserInfo;
import de.monticore.literals.mcjavaliterals._parser.MCJavaLiteralsParserInfo;
import de.monticore.mcbasics._parser.MCBasicsParserInfo;
import de.monticore.literals.mccommonliterals._parser.MCCommonLiteralsParserInfo;
import de.monticore.literals.mcliteralsbasis._parser.MCLiteralsBasisParserInfo;

/**
 * Implementation of DSL4DataspacesParserInfo where every method returns false.
 * This is used in the static delegate pattern as the superclass for the ParserInfoForSuperLang classes.
 * Therefore, the ParserInfoForSuperLang classes don't have to know all symbol references and usage names that are used in a super-language, but not in the sub-language.
 */
public abstract class EmptyDSL4DataspacesParserInfo extends DSL4DataspacesParserInfo{
    @Override
    protected boolean _stateHasUsageNameSource(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameDigits(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePre(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePost(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameParts(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCQualifiedName(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCVoidType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameMCType(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameName(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameConfigurationElements(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameAssetID(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameBaseUrl(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameEndpoint(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameAssetMetaData(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameTitle(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameDescription(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNamePublisher(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameStringLiteral(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameCreated(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameModified(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameDataAddress(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameSchemaAddress(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameAccessPolicy(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameEDCPushEndpointsConfig(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameComplexName(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameRole(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameIdentityProviderConfig(int state){
      return false;
    }

    @Override
    protected boolean _stateHasUsageNameOAuthInfo(int state){
      return false;
    }


  protected boolean _stateDefinesName(int state){
    return false;
  }
}
