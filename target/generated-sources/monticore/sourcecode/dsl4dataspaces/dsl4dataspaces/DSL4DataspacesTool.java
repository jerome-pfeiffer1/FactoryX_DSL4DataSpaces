/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class DSL4DataspacesTool  {

/* Hookpoint: ClassContent:Elements */



    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  static  void main (String[] args)

 {
    /* generated by template _cli.Main*/


 DSL4DataspacesTool tool = new  DSL4DataspacesTool();
   tool.run(args);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void run (String[] args)

 {
    /* generated by template _cli.Run*/

init();
org.apache.commons.cli.Options options = initOptions();
try{
    //create CLI Parser and parse input options from commandline
    org.apache.commons.cli.CommandLineParser cliparser = new org.apache.commons.cli.DefaultParser();
    org.apache.commons.cli.CommandLine cmd = cliparser.parse(options,args);

    //help: when --help
    if(cmd.hasOption("h")){
        printHelp(options);
    //do not continue, when help is printed.
        return;
    }
    //version: when --version
    else if(cmd.hasOption("v")){
        printVersion();
        //do not continue when help is printed
        return;
    }

}catch (org.apache.commons.cli.ParseException e) {
   // e.getMessage displays the incorrect input-parameters
   Log.error("0xA5C06x41752 Could not process DSL4DataspacesTool parameters: " + e.getMessage());
 }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration parse (String model)

 {
    /* generated by template _cli.Parser*/



try {
      dsl4dataspaces.dsl4dataspaces._parser.DSL4DataspacesParser parser = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.parser() ;
      Optional<dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration> optAst = parser.parse(model);

      if (!parser.hasErrors() && optAst.isPresent()) {
        return optAst.get();
      }
      Log.error("0xA1050x44896 Model could not be parsed.");
    }
    catch (NullPointerException | java.io.IOException e) {
      Log.error("0xA1051x18866 Failed to parse " + model, e);
    }
    // should never be reached (unless failquick is off)
    return null;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void init ()

 {
    /* generated by template _cli.Init*/

// initialize logging with standard logging
Log.init();
dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.init();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void prettyPrint (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration ast,String file)

 {
    /* generated by template _cli.PrettyPrint*/

  dsl4dataspaces.dsl4dataspaces._prettyprint.DSL4DataspacesFullPrettyPrinter prettyPrinter = new dsl4dataspaces.dsl4dataspaces._prettyprint.DSL4DataspacesFullPrettyPrinter(new de.monticore.prettyprint.IndentPrinter());
  String printed = prettyPrinter.prettyprint(ast);
  de.monticore.io.FileReaderWriter.storeInFile(java.nio.file.Paths.get(file), printed);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void print (String content,String path)

 {
    /* generated by template _cli.Print*/

// print to stdout or file
  if (path.isEmpty()) {
    System.out.println(content);
  } else {
    java.io.File f = new java.io.File(path);
    // create directories (logs error otherwise)
    f.getAbsoluteFile().getParentFile().mkdirs();
    java.io.FileWriter writer;
    try {
      writer = new java.io.FileWriter(f);
      writer.write(content);
      writer.close();
    } catch (java.io.IOException e) {
      Log.error("0xA7105x42554 Could not write to file " + f.getAbsolutePath());
    }
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void printHelp (org.apache.commons.cli.Options options)

 {
    /* generated by template _cli.PrintHelp*/


  org.apache.commons.cli.HelpFormatter formatter = new org.apache.commons.cli.HelpFormatter();
  formatter.setWidth(80);
  formatter.printHelp("DSL4DataspacesTool", options);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void printVersion ()

 {
    /* generated by template _cli.PrintVersion*/


// Get version string from Metadata and print

final String toolName = "DSL4DataspacesTool";
final String mcVersion = "7.5.0";

java.util.Properties properties = new java.util.Properties();

try {
  java.io.BufferedInputStream stream = new java.io.BufferedInputStream(getClass().getResourceAsStream("/buildInfo.properties"));
  properties.load(stream);
  stream.close();
} catch(java.io.IOException e) {
  // BuildInfo not present
}

String toolVersion = properties.getProperty("version");
if (toolVersion == null) toolVersion = mcVersion;

System.out.println(toolName +
    ", version " + toolVersion +
    ", based on MontiCore version " + mcVersion);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void report (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration ast,String path)

 {
    Log.warn("0xA1058x08295 Reports are not implemented yet.");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void runDefaultCoCos (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration ast)

 {
    Log.warn("0xA1053x07342 default CoCos are not implemented yet.");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void runAdditionalCoCos (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration ast)

 {
    Log.warn("0xA1062x70492 additional CoCos are not implemented yet.");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void storeSymbols (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope scope,String path)

 {
    /* generated by template _cli.StoreSymbols*/

dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesSymbols2Json symbols2Json = new dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesSymbols2Json();
    symbols2Json.store(scope, path);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  org.apache.commons.cli.Options initOptions ()

 {
    /* generated by template _cli.InitOptions*/
org.apache.commons.cli.Options options = new org.apache.commons.cli.Options();
options = addStandardOptions(options);
options = addAdditionalOptions(options);
return options;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  org.apache.commons.cli.Options addStandardOptions (org.apache.commons.cli.Options options)

 {
    /* generated by template _cli.AddStandardOptions*/
//help
options.addOption(org.apache.commons.cli.Option.builder("h")
    .longOpt("help")
    .desc("Prints this help dialog")
    .build());

//version
options.addOption(org.apache.commons.cli.Option.builder("v")
    .longOpt("version")
    .desc("Prints version information")
    .build());

//parse input file
options.addOption(org.apache.commons.cli.Option.builder("i")
    .longOpt("input")
    .argName("file")
    .hasArg()
    .desc("Reads the source file (mandatory) and parses the contents")
    .build());

//pretty print runner
options.addOption(org.apache.commons.cli.Option.builder("pp")
    .longOpt("prettyprint")
    .argName("file")
    .optionalArg(true)
    .numberOfArgs(1)
    .desc("Prints the AST to stdout or the specified file (optional)")
    .build());

// pretty print SC
options.addOption(org.apache.commons.cli.Option.builder("s")
    .longOpt("symboltable")
    .argName("file")
    .hasArg()
    .desc("Serialized the Symbol table of the given artifact.")
    .build());

//reports about the runner
options.addOption(org.apache.commons.cli.Option.builder("r")
    .longOpt("report")
    .argName("dir")
    .hasArg(true)
    .desc("Prints reports of the artifact to the specified directory.")
    .build());

// model paths
options.addOption(org.apache.commons.cli.Option.builder("path")
    .hasArgs()
    .desc("Sets the artifact path for imported symbols, space separated.")
    .build());

return options;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  org.apache.commons.cli.Options addAdditionalOptions (org.apache.commons.cli.Options options)

 {
    /* generated by template _cli.AddAdditionalOptions*/

return options;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope createSymbolTable (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _cli.SymbolTable*/


dsl4dataspaces.dsl4dataspaces._symboltable.DSL4DataspacesScopesGenitorDelegator genitor = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.scopesGenitorDelegator();
dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope symTab = genitor.createFromAST(node);
return symTab;
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void completeSymbolTable (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    Log.warn("0xA1158x36118 This symbol table phase is not implemented yet.");
}


}


