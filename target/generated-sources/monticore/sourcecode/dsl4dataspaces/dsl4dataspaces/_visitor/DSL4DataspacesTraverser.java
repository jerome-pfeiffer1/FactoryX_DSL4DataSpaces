/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Interface*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: InterfaceContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._visitor;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: InterfaceContent:Imports */



/* Hookpoint: InterfaceContent:Annotations */

 public  interface DSL4DataspacesTraverser extends de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser,de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsTraverser  { 
/* Hookpoint: InterfaceContent:Elements */


  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4DSL4Dataspaces (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesVisitor2 dSL4DataspacesVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesVisitor2> getDSL4DataspacesVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCBasicTypes (de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2 mCBasicTypesVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.types.mcbasictypes._visitor.MCBasicTypesVisitor2> getMCBasicTypesVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCJavaLiterals (de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsVisitor2 mCJavaLiteralsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsVisitor2> getMCJavaLiteralsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCBasics (de.monticore.mcbasics._visitor.MCBasicsVisitor2 mCBasicsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.mcbasics._visitor.MCBasicsVisitor2> getMCBasicsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCCommonLiterals (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2 mCCommonLiteralsVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsVisitor2> getMCCommonLiteralsVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void add4MCLiteralsBasis (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2 mCLiteralsBasisVisitor)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisVisitor2> getMCLiteralsBasisVisitorList ()

 {
    return new ArrayList<>();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setDSL4DataspacesHandler (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesHandler dSL4DataspacesHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesHandler> getDSL4DataspacesHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCBasicTypesHandler (de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler mCBasicTypesHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.types.mcbasictypes._visitor.MCBasicTypesHandler> getMCBasicTypesHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCJavaLiteralsHandler (de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsHandler mCJavaLiteralsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsHandler> getMCJavaLiteralsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCBasicsHandler (de.monticore.mcbasics._visitor.MCBasicsHandler mCBasicsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.mcbasics._visitor.MCBasicsHandler> getMCBasicsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCCommonLiteralsHandler (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler mCCommonLiteralsHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsHandler> getMCCommonLiteralsHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setMCLiteralsBasisHandler (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler mCLiteralsBasisHandler)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Optional<de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisHandler> getMCLiteralsBasisHandler ()

 {
    return Optional.empty();
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements> iter_configurationElementss = node.getConfigurationElementsList().iterator();
      while (iter_configurationElementss.hasNext()) {
        iter_configurationElementss.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
      if (null != node.getAssetID()) {
        node.getAssetID().accept(this);
      }
      if (null != node.getBaseUrl()) {
        node.getBaseUrl().accept(this);
      }
      if (null != node.getEndpoint()) {
        node.getEndpoint().accept(this);
      }
      if (null != node.getAssetMetaData()) {
        node.getAssetMetaData().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_title = node.getTitleList().iterator();
      while (iter_title.hasNext()) {
        iter_title.next().accept(this);
      }
    }
      if (node.isPresentDescription()) {
        node.getDescription().accept(this);
      }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(this);
      }
    }
      if (null != node.getCreated()) {
        node.getCreated().accept(this);
      }
      if (null != node.getModified()) {
        node.getModified().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
      if (null != node.getBaseUrl()) {
        node.getBaseUrl().accept(this);
      }
      if (null != node.getEndpoint()) {
        node.getEndpoint().accept(this);
      }
      if (null != node.getDataAddress()) {
        node.getDataAddress().accept(this);
      }
      if (null != node.getSchemaAddress()) {
        node.getSchemaAddress().accept(this);
      }
      if (null != node.getAccessPolicy()) {
        node.getAccessPolicy().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(this);
      }
    }
      if (null != node.getAccessPolicy()) {
        node.getAccessPolicy().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(this);
      }
    }
      if (null != node.getEDCPushEndpointsConfig()) {
        node.getEDCPushEndpointsConfig().accept(this);
      }
      if (null != node.getAccessPolicy()) {
        node.getAccessPolicy().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
      while (iter_complexNames.hasNext()) {
        iter_complexNames.next().accept(this);
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(this);
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTRole> iter_roles = node.getRoleList().iterator();
      while (iter_roles.hasNext()) {
        iter_roles.next().accept(this);
      }
    }
      if (node.isPresentIdentityProviderConfig()) {
        node.getIdentityProviderConfig().accept(this);
      }
      if (node.isPresentOAuthInfo()) {
        node.getOAuthInfo().accept(this);
      }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
      while (iter_complexNames.hasNext()) {
        iter_complexNames.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(this);
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
      while (iter_complexNames.hasNext()) {
        iter_complexNames.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template _visitor.traverser.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


if (getDSL4DataspacesHandler().isPresent()) {
  getDSL4DataspacesHandler().get().traverse(node);
} else {
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(this);
      }
    }

}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTUsage node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTUsage node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode node)

 {
    /* generated by template _visitor.traverser.Handle*/

    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
      endVisit(node);
    }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._symboltable.ICommonDSL4DataspacesSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._symboltable.ICommonDSL4DataspacesSymbol node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.ICommonDSL4DataspacesSymbol node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._symboltable.ICommonDSL4DataspacesSymbol node)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope node)

 {
    /* generated by template _visitor.traverser.TraverseScope*/

  if (getDSL4DataspacesHandler().isPresent()) {
    getDSL4DataspacesHandler().get().traverse(node);
  } else {
  // traverse symbols within the scope
  // traverse sub-scopes
  for (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope scope : node.getSubScopes()) {
    scope.accept(this);
  }
}
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void visit (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.visit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void endVisit (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope node)

 {
    /* generated by template _visitor.traverser.DelegatingMethods*/

  getDSL4DataspacesVisitorList().forEach(v -> v.endVisit(node));

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope node)

 {
    /* generated by template _visitor.traverser.Handle*/

  if (!getTraversedElements().contains(node)) {
    addTraversedElement(node);
    if (getDSL4DataspacesHandler().isPresent()) {
      getDSL4DataspacesHandler().get().handle(node);
    } else {
      visit(node);
      traverse(node);
      endVisit(node);
    }
  }

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope node)

 {
    traverse((dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) node);
}

}
