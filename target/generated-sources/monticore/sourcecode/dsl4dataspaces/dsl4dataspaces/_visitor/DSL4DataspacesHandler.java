/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Interface*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: InterfaceContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._visitor;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: InterfaceContent:Imports */



/* Hookpoint: InterfaceContent:Annotations */

 public  interface DSL4DataspacesHandler extends de.monticore.visitor.IHandler  { 
/* Hookpoint: InterfaceContent:Elements */


  /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 abstract  public  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser getTraverser ()

;
  /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 abstract  public  void setTraverser (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser)

;
  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements> iter_configurationElementss = node.getConfigurationElementsList().iterator();
      while (iter_configurationElementss.hasNext()) {
        iter_configurationElementss.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.




}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_assetID = node.getAssetIDList().iterator();
      while (iter_assetID.hasNext()) {
        iter_assetID.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_baseUrl = node.getBaseUrlList().iterator();
      while (iter_baseUrl.hasNext()) {
        iter_baseUrl.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_endpoint = node.getEndpointList().iterator();
      while (iter_endpoint.hasNext()) {
        iter_endpoint.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> iter_assetMetaDatas = node.getAssetMetaDataList().iterator();
      while (iter_assetMetaDatas.hasNext()) {
        iter_assetMetaDatas.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_title = node.getTitleList().iterator();
      while (iter_title.hasNext()) {
        iter_title.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_description = node.getDescriptionList().iterator();
      while (iter_description.hasNext()) {
        iter_description.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_version = node.getVersionList().iterator();
      while (iter_version.hasNext()) {
        iter_version.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_created = node.getCreatedList().iterator();
      while (iter_created.hasNext()) {
        iter_created.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_modified = node.getModifiedList().iterator();
      while (iter_modified.hasNext()) {
        iter_modified.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


      if (null != node.getDataAddress()) {
        node.getDataAddress().accept(getTraverser());
      }
      if (null != node.getSchemaAddress()) {
        node.getSchemaAddress().accept(getTraverser());
      }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage> iter_baseUsages = node.getBaseUsageList().iterator();
      while (iter_baseUsages.hasNext()) {
        iter_baseUsages.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy> iter_accessPolicys = node.getAccessPolicyList().iterator();
      while (iter_accessPolicys.hasNext()) {
        iter_accessPolicys.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage> iter_baseUsages = node.getBaseUsageList().iterator();
      while (iter_baseUsages.hasNext()) {
        iter_baseUsages.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig> iter_eDCPushEndpointsConfigs = node.getEDCPushEndpointsConfigList().iterator();
      while (iter_eDCPushEndpointsConfigs.hasNext()) {
        iter_eDCPushEndpointsConfigs.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy> iter_accessPolicys = node.getAccessPolicyList().iterator();
      while (iter_accessPolicys.hasNext()) {
        iter_accessPolicys.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
      while (iter_complexNames.hasNext()) {
        iter_complexNames.next().accept(getTraverser());
      }
    }
    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTRole> iter_roles = node.getRoleList().iterator();
      while (iter_roles.hasNext()) {
        iter_roles.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig> iter_identityProviderConfigs = node.getIdentityProviderConfigList().iterator();
      while (iter_identityProviderConfigs.hasNext()) {
        iter_identityProviderConfigs.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo> iter_oAuthInfos = node.getOAuthInfoList().iterator();
      while (iter_oAuthInfos.hasNext()) {
        iter_oAuthInfos.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
      while (iter_complexNames.hasNext()) {
        iter_complexNames.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(getTraverser());
      }
    }
    {
      Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
      while (iter_complexNames.hasNext()) {
        iter_complexNames.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template _visitor.handler.Traverse*/
// One might think that we could call traverse(subelement) immediately,
// but this is not true for interface-types where we do not know the
// concrete type of the element.
// Instead we double-dispatch the call, to call the correctly typed
// traverse(...) method with the elements concrete type.


    {
      Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
      while (iter_stringLiterals.hasNext()) {
        iter_stringLiterals.next().accept(getTraverser());
      }
    }


}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTUsage node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.ICommonDSL4DataspacesSymbol node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._symboltable.ICommonDSL4DataspacesSymbol node)

 {
    /* generated by template cd2java.EmptyBody*/
// empty body

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope node)

 {
    /* generated by template _visitor.handler.TraverseScope*/

  // traverse symbols within the scope

  // traverse sub-scopes
  for (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope scope : node.getSubScopes()) {
    scope.accept(getTraverser());
  }
}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope node)

 {
    /* generated by template _visitor.handler.Handle*/

  getTraverser().visit(node);
  getTraverser().traverse(node);
  getTraverser().endVisit(node);

}

  default /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void traverse (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope node)

 {
    traverse((dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) node);
}

}
