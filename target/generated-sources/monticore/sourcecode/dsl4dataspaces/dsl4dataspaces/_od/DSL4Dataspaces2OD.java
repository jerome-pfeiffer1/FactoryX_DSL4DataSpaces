/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._od;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class DSL4Dataspaces2OD  implements dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesVisitor2,dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesHandler {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.prettyprint.IndentPrinter pp
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean printEmptyOptional
  = false;
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean printEmptyList
  = false;
;


    /* generated by template cd2java.Constructor*/
 public  DSL4Dataspaces2OD(de.monticore.prettyprint.IndentPrinter printer,de.monticore.generating.templateengine.reporting.commons.ReportingRepository reporting)
 {
  /* generated by template _od.ConstructorOD*/
  this.reporting = reporting;
  this.pp = printer;
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("name", String.valueOf(node.getName()));
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements> iter_configurationElementss = node.getConfigurationElementsList().iterator();
    boolean isEmpty = true;
    if (iter_configurationElementss.hasNext()) {
      pp.print("configurationElementss");
      pp.print(" = [");
      pp.println("// *size: " + node.getConfigurationElementsList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("configurationElementss");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_configurationElementss.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_configurationElementss.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("names", String.valueOf(node.getNameList()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTDiscoveryData");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_assetID = node.getAssetIDList().iterator();
    boolean isEmpty = true;
    if (iter_assetID.hasNext()) {
      pp.print("assetID");
      pp.print(" = [");
      pp.println("// *size: " + node.getAssetIDList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("assetID");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_assetID.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_assetID.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_baseUrl = node.getBaseUrlList().iterator();
    boolean isEmpty = true;
    if (iter_baseUrl.hasNext()) {
      pp.print("baseUrl");
      pp.print(" = [");
      pp.println("// *size: " + node.getBaseUrlList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("baseUrl");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_baseUrl.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_baseUrl.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_endpoint = node.getEndpointList().iterator();
    boolean isEmpty = true;
    if (iter_endpoint.hasNext()) {
      pp.print("endpoint");
      pp.print(" = [");
      pp.println("// *size: " + node.getEndpointList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("endpoint");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_endpoint.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_endpoint.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> iter_assetMetaDatas = node.getAssetMetaDataList().iterator();
    boolean isEmpty = true;
    if (iter_assetMetaDatas.hasNext()) {
      pp.print("assetMetaDatas");
      pp.print(" = [");
      pp.println("// *size: " + node.getAssetMetaDataList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("assetMetaDatas");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_assetMetaDatas.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_assetMetaDatas.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  printAttribute("idType", String.valueOf(node.isIdType()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_title = node.getTitleList().iterator();
    boolean isEmpty = true;
    if (iter_title.hasNext()) {
      pp.print("title");
      pp.print(" = [");
      pp.println("// *size: " + node.getTitleList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("title");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_title.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_title.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_description = node.getDescriptionList().iterator();
    boolean isEmpty = true;
    if (iter_description.hasNext()) {
      pp.print("description");
      pp.print(" = [");
      pp.println("// *size: " + node.getDescriptionList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("description");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_description.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_description.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  printAttribute("publisher", String.valueOf(node.getPublisherList()));
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
    boolean isEmpty = true;
    if (iter_stringLiterals.hasNext()) {
      pp.print("stringLiterals");
      pp.print(" = [");
      pp.println("// *size: " + node.getStringLiteralList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("stringLiterals");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_stringLiterals.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_stringLiterals.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_version = node.getVersionList().iterator();
    boolean isEmpty = true;
    if (iter_version.hasNext()) {
      pp.print("version");
      pp.print(" = [");
      pp.println("// *size: " + node.getVersionList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("version");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_version.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_version.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_created = node.getCreatedList().iterator();
    boolean isEmpty = true;
    if (iter_created.hasNext()) {
      pp.print("created");
      pp.print(" = [");
      pp.println("// *size: " + node.getCreatedList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("created");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_created.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_created.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_modified = node.getModifiedList().iterator();
    boolean isEmpty = true;
    if (iter_modified.hasNext()) {
      pp.print("modified");
      pp.print(" = [");
      pp.println("// *size: " + node.getModifiedList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("modified");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_modified.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_modified.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  printAttribute("language", String.valueOf(node.getLanguage()));
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  if (null != node.getDataAddress()) {
    pp.print("dataAddress");
    pp.print(" = ");
    node.getDataAddress().accept(getTraverser());
    pp.println(";");
  }
  if (null != node.getSchemaAddress()) {
    pp.print("schemaAddress");
    pp.print(" = ");
    node.getSchemaAddress().accept(getTraverser());
    pp.println(";");
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTOPCUAUsage");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage> iter_baseUsages = node.getBaseUsageList().iterator();
    boolean isEmpty = true;
    if (iter_baseUsages.hasNext()) {
      pp.print("baseUsages");
      pp.print(" = [");
      pp.println("// *size: " + node.getBaseUsageList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("baseUsages");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_baseUsages.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_baseUsages.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
    boolean isEmpty = true;
    if (iter_stringLiterals.hasNext()) {
      pp.print("stringLiterals");
      pp.print(" = [");
      pp.println("// *size: " + node.getStringLiteralList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("stringLiterals");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_stringLiterals.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_stringLiterals.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy> iter_accessPolicys = node.getAccessPolicyList().iterator();
    boolean isEmpty = true;
    if (iter_accessPolicys.hasNext()) {
      pp.print("accessPolicys");
      pp.print(" = [");
      pp.println("// *size: " + node.getAccessPolicyList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("accessPolicys");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_accessPolicys.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_accessPolicys.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTEDCUsage");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTBaseUsage> iter_baseUsages = node.getBaseUsageList().iterator();
    boolean isEmpty = true;
    if (iter_baseUsages.hasNext()) {
      pp.print("baseUsages");
      pp.print(" = [");
      pp.println("// *size: " + node.getBaseUsageList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("baseUsages");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_baseUsages.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_baseUsages.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  printAttribute("names", String.valueOf(node.getNameList()));
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
    boolean isEmpty = true;
    if (iter_stringLiterals.hasNext()) {
      pp.print("stringLiterals");
      pp.print(" = [");
      pp.println("// *size: " + node.getStringLiteralList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("stringLiterals");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_stringLiterals.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_stringLiterals.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig> iter_eDCPushEndpointsConfigs = node.getEDCPushEndpointsConfigList().iterator();
    boolean isEmpty = true;
    if (iter_eDCPushEndpointsConfigs.hasNext()) {
      pp.print("eDCPushEndpointsConfigs");
      pp.print(" = [");
      pp.println("// *size: " + node.getEDCPushEndpointsConfigList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("eDCPushEndpointsConfigs");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_eDCPushEndpointsConfigs.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_eDCPushEndpointsConfigs.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy> iter_accessPolicys = node.getAccessPolicyList().iterator();
    boolean isEmpty = true;
    if (iter_accessPolicys.hasNext()) {
      pp.print("accessPolicys");
      pp.print(" = [");
      pp.println("// *size: " + node.getAccessPolicyList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("accessPolicys");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_accessPolicys.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_accessPolicys.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTEDCPushEndpointsConfig");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
    boolean isEmpty = true;
    if (iter_complexNames.hasNext()) {
      pp.print("complexNames");
      pp.print(" = [");
      pp.println("// *size: " + node.getComplexNameList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("complexNames");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_complexNames.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_complexNames.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
    boolean isEmpty = true;
    if (iter_stringLiterals.hasNext()) {
      pp.print("stringLiterals");
      pp.print(" = [");
      pp.println("// *size: " + node.getStringLiteralList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("stringLiterals");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_stringLiterals.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_stringLiterals.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTAccessPolicy");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  printAttribute("names", String.valueOf(node.getNameList()));
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
    boolean isEmpty = true;
    if (iter_stringLiterals.hasNext()) {
      pp.print("stringLiterals");
      pp.print(" = [");
      pp.println("// *size: " + node.getStringLiteralList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("stringLiterals");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_stringLiterals.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_stringLiterals.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTRole> iter_roles = node.getRoleList().iterator();
    boolean isEmpty = true;
    if (iter_roles.hasNext()) {
      pp.print("roles");
      pp.print(" = [");
      pp.println("// *size: " + node.getRoleList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("roles");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_roles.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_roles.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig> iter_identityProviderConfigs = node.getIdentityProviderConfigList().iterator();
    boolean isEmpty = true;
    if (iter_identityProviderConfigs.hasNext()) {
      pp.print("identityProviderConfigs");
      pp.print(" = [");
      pp.println("// *size: " + node.getIdentityProviderConfigList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("identityProviderConfigs");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_identityProviderConfigs.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_identityProviderConfigs.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo> iter_oAuthInfos = node.getOAuthInfoList().iterator();
    boolean isEmpty = true;
    if (iter_oAuthInfos.hasNext()) {
      pp.print("oAuthInfos");
      pp.print(" = [");
      pp.println("// *size: " + node.getOAuthInfoList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("oAuthInfos");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_oAuthInfos.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_oAuthInfos.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTRole node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTRole");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
    boolean isEmpty = true;
    if (iter_complexNames.hasNext()) {
      pp.print("complexNames");
      pp.print(" = [");
      pp.println("// *size: " + node.getComplexNameList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("complexNames");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_complexNames.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_complexNames.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTIdentityProviderConfig");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
    boolean isEmpty = true;
    if (iter_stringLiterals.hasNext()) {
      pp.print("stringLiterals");
      pp.print(" = [");
      pp.println("// *size: " + node.getStringLiteralList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("stringLiterals");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_stringLiterals.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_stringLiterals.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  {
    Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iter_complexNames = node.getComplexNameList().iterator();
    boolean isEmpty = true;
    if (iter_complexNames.hasNext()) {
      pp.print("complexNames");
      pp.print(" = [");
      pp.println("// *size: " + node.getComplexNameList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("complexNames");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_complexNames.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_complexNames.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void handle (dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo node)

 {
    /* generated by template _od.HandleOD*/


  String name = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
  printObject(name, "dsl4dataspaces.dsl4dataspaces._ast.ASTOAuthInfo");
  pp.indent();
  String scopeName = de.se_rwth.commons.StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope()));
  pp.println("enclosingScope = " + scopeName + ";");
  {
    Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iter_stringLiterals = node.getStringLiteralList().iterator();
    boolean isEmpty = true;
    if (iter_stringLiterals.hasNext()) {
      pp.print("stringLiterals");
      pp.print(" = [");
      pp.println("// *size: " + node.getStringLiteralList().size());
      pp.indent();
      isEmpty = false;
    } else if (printEmptyList) {
      pp.print("stringLiterals");
      pp.println(" = [];");
    }
    boolean isFirst = true;
    while (iter_stringLiterals.hasNext()) {
      if (!isFirst) {
        pp.println(",");
      }
      isFirst = false;
      iter_stringLiterals.next().accept(getTraverser());
    }
    if (!isEmpty) {
      pp.println("];");
      pp.unindent();
    }
  }
  pp.unindent();
  pp.print("}");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser getTraverser ()

 {
    /* generated by template methods.Get*/

return this.traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTraverser (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser)

 {
    /* generated by template methods.Set*/

this.traverser = traverser;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void printAttribute (String name,String value)

 {
    /* generated by template _od.PrintAttribute*/
  pp.print(name);
  pp.print(" = ");
  pp.print(value);
  pp.println(";");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  void printObject (String objName,String objType)

 {
    /* generated by template _od.PrintObject*/
pp.print(objName);
pp.print(":");
pp.print(de.se_rwth.commons.Names.getSimpleName(objType));
pp.println(" {");
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String printObjectDiagram (String modelName,dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode node)

 {
    /* generated by template _od.PrintObjectDiagram*/
  pp.clearBuffer();
  pp.setIndentLength(2);
  pp.print("objectdiagram ");
  pp.print(modelName);
  pp.println(" {");
  pp.indent();
  node.accept(getTraverser());
  pp.print(";");
  pp.unindent();
  pp.println("}");
  return pp.getContent();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPrintEmptyOptional ()

 {
    /* generated by template methods.Get*/

return this.printEmptyOptional;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setPrintEmptyOptional (boolean printEmptyOptional)

 {
    /* generated by template methods.Set*/

this.printEmptyOptional = printEmptyOptional;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isPrintEmptyList ()

 {
    /* generated by template methods.Get*/

return this.printEmptyList;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setPrintEmptyList (boolean printEmptyList)

 {
    /* generated by template methods.Set*/

this.printEmptyList = printEmptyList;

}


}


