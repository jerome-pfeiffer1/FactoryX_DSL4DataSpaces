/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._ast;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;

import de.monticore.ast.ASTCNode;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;


/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class ASTDiscoveryData extends ASTCNode  implements dsl4dataspaces.dsl4dataspaces._ast.ASTConfigurationElements,dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> assetID
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> baseUrl
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> endpoint
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> assetMetaDatas
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  boolean idType
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope enclosingScope
  
;


    /* generated by template cd2java.Constructor*/
 protected  ASTDiscoveryData()
 {
  /* generated by template cd2java.EmptyBody*/
// empty body

}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEquals (Object o)

 {
         return deepEquals(o, true);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEquals (Object o,boolean forceSameOrder)

 {
    /* generated by template data.DeepEqualsWithOrder*/

      ASTDiscoveryData comp;
    if ((o instanceof ASTDiscoveryData)) {
      comp = (ASTDiscoveryData) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing assetID
    if (this.assetID.size() != comp.assetID.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.assetID.iterator();
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.assetID.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.assetID.iterator();
        while (it1.hasNext()) {
          dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.assetID.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing baseUrl
    if (this.baseUrl.size() != comp.baseUrl.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.baseUrl.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.baseUrl.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.baseUrl.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.baseUrl.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endpoint
    if (this.endpoint.size() != comp.endpoint.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.endpoint.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.endpoint.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.endpoint.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.endpoint.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing assetMetaDatas
    if (this.assetMetaDatas.size() != comp.assetMetaDatas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it1 = this.assetMetaDatas.iterator();
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it2 = comp.assetMetaDatas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it1 = this.assetMetaDatas.iterator();
        while (it1.hasNext()) {
          dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it2 = comp.assetMetaDatas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEqualsWithComments (Object o)

 {
         return deepEqualsWithComments(o, true);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)

 {
    /* generated by template data.DeepEqualsWithComments*/

      ASTDiscoveryData comp;
    if ((o instanceof ASTDiscoveryData)) {
      comp = (ASTDiscoveryData) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing assetID
    if (this.assetID.size() != comp.assetID.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.assetID.iterator();
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.assetID.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.assetID.iterator();
        while (it1.hasNext()) {
          dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.assetID.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing baseUrl
    if (this.baseUrl.size() != comp.baseUrl.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.baseUrl.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.baseUrl.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.baseUrl.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.baseUrl.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endpoint
    if (this.endpoint.size() != comp.endpoint.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.endpoint.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.endpoint.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.endpoint.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.endpoint.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing assetMetaDatas
    if (this.assetMetaDatas.size() != comp.assetMetaDatas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it1 = this.assetMetaDatas.iterator();
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it2 = comp.assetMetaDatas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it1 = this.assetMetaDatas.iterator();
        while (it1.hasNext()) {
          dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> it2 = comp.assetMetaDatas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalAttributes (Object o)

 {
    /* generated by template data.EqualAttributes*/

      ASTDiscoveryData comp;
    if ((o instanceof ASTDiscoveryData)) {
      comp = (ASTDiscoveryData) o;
    } else {
      return false;
    }
	// comparing idType 
    if (!(this.idType == comp.idType)) {
      return false;
    }
    return true;


}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsWithComments (Object o)

 {
    /* generated by template data.EqualsWithComments*/

      ASTDiscoveryData comp;
    if ((o instanceof ASTDiscoveryData)) {
      comp = (ASTDiscoveryData) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ASTDiscoveryData deepClone ()

 {
        return deepClone(_construct());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ASTDiscoveryData deepClone (ASTDiscoveryData result)

 {
    /* generated by template data.DeepCloneWithParameters*/


  result.set_SourcePositionStart(get_SourcePositionStart().clone());
  result.set_SourcePositionEnd(get_SourcePositionEnd().clone());
  for (de.monticore.ast.Comment x : get_PreCommentList()) {
    result.get_PreCommentList().add(new de.monticore.ast.Comment(x.getText()));
  }
  for (de.monticore.ast.Comment x : get_PostCommentList()) {
    result.get_PostCommentList().add(new de.monticore.ast.Comment(x.getText()));
  }

      getAssetIDList().forEach(s -> result.assetID.add(s.deepClone()));
      getBaseUrlList().forEach(s -> result.baseUrl.add(s.deepClone()));
      getEndpointList().forEach(s -> result.endpoint.add(s.deepClone()));
      getAssetMetaDataList().forEach(s -> result.assetMetaDatas.add(s.deepClone()));
      result.setIdType(isIdType());
    
    return result;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAssetID (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllAssetID (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iteratorAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName[] toArrayAssetID (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> spliteratorAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> streamAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> parallelStreamAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName getAssetID (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfAssetID (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfAssetID (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsAssetID (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> listIteratorAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> listIteratorAssetID (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> subListAssetID (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> getAssetIDList ()

 {
    /* generated by template methods.Get*/

return this.assetID;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsBaseUrl (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllBaseUrl (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iteratorBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] toArrayBaseUrl (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> spliteratorBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> streamBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parallelStreamBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getBaseUrl (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfBaseUrl (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfBaseUrl (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsBaseUrl (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorBaseUrl (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> subListBaseUrl (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> getBaseUrlList ()

 {
    /* generated by template methods.Get*/

return this.baseUrl;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsEndpoint (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllEndpoint (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iteratorEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] toArrayEndpoint (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> spliteratorEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> streamEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parallelStreamEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getEndpoint (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfEndpoint (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfEndpoint (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsEndpoint (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorEndpoint (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> subListEndpoint (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> getEndpointList ()

 {
    /* generated by template methods.Get*/

return this.endpoint;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAssetMetaData (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllAssetMetaDatas (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> iteratorAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData[] toArrayAssetMetaDatas (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> spliteratorAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> streamAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> parallelStreamAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData getAssetMetaData (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfAssetMetaData (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfAssetMetaData (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsAssetMetaDatas (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> listIteratorAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> listIteratorAssetMetaDatas (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> subListAssetMetaDatas (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> getAssetMetaDataList ()

 {
    /* generated by template methods.Get*/

return this.assetMetaDatas;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isIdType ()

 {
    /* generated by template methods.Get*/

return this.idType;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearAssetID ()

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetIDList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAssetID (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllAssetID (Collection<? extends dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAssetID (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllAssetID (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllAssetID (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfAssetID (Predicate<? super dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachAssetID (Consumer<? super dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetIDList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addAssetID (int index,dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName element)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetIDList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllAssetID (int index,Collection<? extends dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName removeAssetID (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName setAssetID (int index,dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetIDList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllAssetID (UnaryOperator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetIDList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortAssetID (Comparator<? super dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetIDList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setAssetIDList (List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> assetID)

 {
    /* generated by template methods.Set*/

this.assetID = assetID;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearBaseUrl ()

 {
    /* generated by template methods.MethodDelegate*/

this.getBaseUrlList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addBaseUrl (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllBaseUrl (Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeBaseUrl (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllBaseUrl (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllBaseUrl (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfBaseUrl (Predicate<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachBaseUrl (Consumer<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getBaseUrlList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addBaseUrl (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

this.getBaseUrlList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllBaseUrl (int index,Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral removeBaseUrl (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral setBaseUrl (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getBaseUrlList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllBaseUrl (UnaryOperator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getBaseUrlList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortBaseUrl (Comparator<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getBaseUrlList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setBaseUrlList (List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> baseUrl)

 {
    /* generated by template methods.Set*/

this.baseUrl = baseUrl;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearEndpoint ()

 {
    /* generated by template methods.MethodDelegate*/

this.getEndpointList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addEndpoint (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllEndpoint (Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeEndpoint (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllEndpoint (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllEndpoint (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfEndpoint (Predicate<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachEndpoint (Consumer<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getEndpointList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addEndpoint (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

this.getEndpointList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllEndpoint (int index,Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral removeEndpoint (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral setEndpoint (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getEndpointList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllEndpoint (UnaryOperator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getEndpointList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortEndpoint (Comparator<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getEndpointList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEndpointList (List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> endpoint)

 {
    /* generated by template methods.Set*/

this.endpoint = endpoint;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearAssetMetaDatas ()

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetMetaDataList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAssetMetaData (dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllAssetMetaDatas (Collection<? extends dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAssetMetaData (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllAssetMetaDatas (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllAssetMetaDatas (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfAssetMetaData (Predicate<? super dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachAssetMetaDatas (Consumer<? super dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetMetaDataList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addAssetMetaData (int index,dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData element)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetMetaDataList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllAssetMetaDatas (int index,Collection<? extends dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData removeAssetMetaData (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData setAssetMetaData (int index,dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getAssetMetaDataList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllAssetMetaDatas (UnaryOperator<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetMetaDataList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortAssetMetaDatas (Comparator<? super dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getAssetMetaDataList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setAssetMetaDataList (List<dsl4dataspaces.dsl4dataspaces._ast.ASTAssetMetaData> assetMetaDatas)

 {
    /* generated by template methods.Set*/

this.assetMetaDatas = assetMetaDatas;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setIdType (boolean idType)

 {
    /* generated by template methods.Set*/

this.idType = idType;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser visitor)

 {
    /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x71743 AST node type ASTDiscoveryData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x16134 AST node type ASTDiscoveryData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x82675 AST node type ASTDiscoveryData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x33977 AST node type ASTDiscoveryData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x44249 AST node type ASTDiscoveryData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x53513 AST node type ASTDiscoveryData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  ASTDiscoveryData _construct ()

 {
    return dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.discoveryDataBuilder().uncheckedBuild();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope getEnclosingScope ()

 {
    /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope enclosingScope)

 {
    /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mcjavaliterals._symboltable.IMCJavaLiteralsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x18025 The EnclosingScope form type de.monticore.literals.mcjavaliterals._symboltable.IMCJavaLiteralsScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x18025 The EnclosingScope form type de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x18025 The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x18025 The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x18025 The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}


}


