/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._ast;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;

import de.monticore.ast.ASTCNode;
import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;


/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class ASTAssetMetaData extends ASTCNode  implements dsl4dataspaces.dsl4dataspaces._ast.ASTDSL4DataspacesNode {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> title
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> description
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<String> publisher
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> stringLiterals
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> version
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> created
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  java.util.List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> modified
  = new java.util.ArrayList<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  int language
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope enclosingScope
  
;


    /* generated by template cd2java.Constructor*/
 protected  ASTAssetMetaData()
 {
  /* generated by template cd2java.EmptyBody*/
// empty body

}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEquals (Object o)

 {
         return deepEquals(o, true);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEquals (Object o,boolean forceSameOrder)

 {
    /* generated by template data.DeepEqualsWithOrder*/

      ASTAssetMetaData comp;
    if ((o instanceof ASTAssetMetaData)) {
      comp = (ASTAssetMetaData) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing title
    if (this.title.size() != comp.title.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.title.iterator();
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.title.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.title.iterator();
        while (it1.hasNext()) {
          dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.title.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing description
    if (this.description.size() != comp.description.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.description.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.description.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.description.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.description.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing stringLiterals
    if (this.stringLiterals.size() != comp.stringLiterals.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.stringLiterals.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.stringLiterals.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.stringLiterals.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.stringLiterals.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing version
    if (this.version.size() != comp.version.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.version.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.version.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.version.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.version.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing created
    if (this.created.size() != comp.created.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.created.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.created.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.created.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.created.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing modified
    if (this.modified.size() != comp.modified.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.modified.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.modified.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.modified.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.modified.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEqualsWithComments (Object o)

 {
         return deepEqualsWithComments(o, true);
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean deepEqualsWithComments (Object o,boolean forceSameOrder)

 {
    /* generated by template data.DeepEqualsWithComments*/

      ASTAssetMetaData comp;
    if ((o instanceof ASTAssetMetaData)) {
      comp = (ASTAssetMetaData) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing title
    if (this.title.size() != comp.title.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.title.iterator();
        Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.title.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it1 = this.title.iterator();
        while (it1.hasNext()) {
          dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> it2 = comp.title.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing description
    if (this.description.size() != comp.description.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.description.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.description.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.description.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.description.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing stringLiterals
    if (this.stringLiterals.size() != comp.stringLiterals.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.stringLiterals.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.stringLiterals.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.stringLiterals.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.stringLiterals.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing version
    if (this.version.size() != comp.version.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.version.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.version.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.version.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.version.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing created
    if (this.created.size() != comp.created.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.created.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.created.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.created.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.created.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing modified
    if (this.modified.size() != comp.modified.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.modified.iterator();
        Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.modified.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next(), forceSameOrder)) {
            return false;
          }
        }
      } else {
        java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it1 = this.modified.iterator();
        while (it1.hasNext()) {
          de.monticore.literals.mccommonliterals._ast.ASTStringLiteral oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> it2 = comp.modified.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next(), forceSameOrder)) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalAttributes (Object o)

 {
    /* generated by template data.EqualAttributes*/

      ASTAssetMetaData comp;
    if ((o instanceof ASTAssetMetaData)) {
      comp = (ASTAssetMetaData) o;
    } else {
      return false;
    }
	// comparing publisher 
    if ( (this.publisher == null && comp.publisher != null) 
      || (this.publisher != null && !this.publisher.equals(comp.publisher)) ) {
      return false;
    }
	// comparing language 
    if (!(this.language == comp.language)) {
      return false;
    }
    return true;


}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsWithComments (Object o)

 {
    /* generated by template data.EqualsWithComments*/

      ASTAssetMetaData comp;
    if ((o instanceof ASTAssetMetaData)) {
      comp = (ASTAssetMetaData) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostCommentList().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostCommentList().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ASTAssetMetaData deepClone ()

 {
        return deepClone(_construct());
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ASTAssetMetaData deepClone (ASTAssetMetaData result)

 {
    /* generated by template data.DeepCloneWithParameters*/


  result.set_SourcePositionStart(get_SourcePositionStart().clone());
  result.set_SourcePositionEnd(get_SourcePositionEnd().clone());
  for (de.monticore.ast.Comment x : get_PreCommentList()) {
    result.get_PreCommentList().add(new de.monticore.ast.Comment(x.getText()));
  }
  for (de.monticore.ast.Comment x : get_PostCommentList()) {
    result.get_PostCommentList().add(new de.monticore.ast.Comment(x.getText()));
  }

      getTitleList().forEach(s -> result.title.add(s.deepClone()));
      getDescriptionList().forEach(s -> result.description.add(s.deepClone()));
      for ( int i = 0; i < this.getPublisherList().size() ; i++ ) {
        result.addPublisher(getPublisher(i));
      }
      getStringLiteralList().forEach(s -> result.stringLiterals.add(s.deepClone()));
      getVersionList().forEach(s -> result.version.add(s.deepClone()));
      getCreatedList().forEach(s -> result.created.add(s.deepClone()));
      getModifiedList().forEach(s -> result.modified.add(s.deepClone()));
      result.setLanguage(getLanguage());
    
    return result;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsTitle (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllTitle (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> iteratorTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName[] toArrayTitle (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> spliteratorTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> streamTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> parallelStreamTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName getTitle (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfTitle (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfTitle (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsTitle (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> listIteratorTitle ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> listIteratorTitle (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> subListTitle (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> getTitleList ()

 {
    /* generated by template methods.Get*/

return this.title;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsDescription (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllDescription (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iteratorDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] toArrayDescription (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> spliteratorDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> streamDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parallelStreamDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getDescription (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfDescription (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfDescription (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsDescription (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorDescription ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorDescription (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> subListDescription (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> getDescriptionList ()

 {
    /* generated by template methods.Get*/

return this.description;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsPublisher (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllPublisher (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<String> iteratorPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizePublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String[] toArrayPublisher (String[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<String> spliteratorPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<String> streamPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<String> parallelStreamPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String getPublisher (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfPublisher (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfPublisher (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsPublisher (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodePublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<String> listIteratorPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<String> listIteratorPublisher (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<String> subListPublisher (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<String> getPublisherList ()

 {
    /* generated by template methods.Get*/

return this.publisher;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsStringLiteral (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllStringLiterals (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iteratorStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] toArrayStringLiterals (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> spliteratorStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> streamStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parallelStreamStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getStringLiteral (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfStringLiteral (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfStringLiteral (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsStringLiterals (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorStringLiterals (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> subListStringLiterals (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> getStringLiteralList ()

 {
    /* generated by template methods.Get*/

return this.stringLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsVersion (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllVersion (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iteratorVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] toArrayVersion (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> spliteratorVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> streamVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parallelStreamVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getVersion (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfVersion (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfVersion (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsVersion (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorVersion ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorVersion (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> subListVersion (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> getVersionList ()

 {
    /* generated by template methods.Get*/

return this.version;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsCreated (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllCreated (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iteratorCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] toArrayCreated (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> spliteratorCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> streamCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parallelStreamCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getCreated (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfCreated (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfCreated (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsCreated (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorCreated ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorCreated (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> subListCreated (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> getCreatedList ()

 {
    /* generated by template methods.Get*/

return this.created;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsModified (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().contains(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean containsAllModified (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().containsAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean isEmptyModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().isEmpty();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Iterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> iteratorModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().iterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int sizeModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().size();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] toArrayModified (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral[] array)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().toArray(array);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Object[] toArrayModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().toArray();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Spliterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> spliteratorModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().spliterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> streamModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().stream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  Stream<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> parallelStreamModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().parallelStream();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral getModified (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().get(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int indexOfModified (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().indexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int lastIndexOfModified (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().lastIndexOf(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean equalsModified (Object o)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().equals(o);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int hashCodeModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().hashCode();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorModified ()

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().listIterator();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  ListIterator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> listIteratorModified (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().listIterator(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> subListModified (int start,int end)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().subList(start, end);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> getModifiedList ()

 {
    /* generated by template methods.Get*/

return this.modified;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  int getLanguage ()

 {
    /* generated by template methods.Get*/

return this.language;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearTitle ()

 {
    /* generated by template methods.MethodDelegate*/

this.getTitleList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addTitle (dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllTitle (Collection<? extends dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeTitle (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllTitle (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllTitle (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfTitle (Predicate<? super dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachTitle (Consumer<? super dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getTitleList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addTitle (int index,dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName element)

 {
    /* generated by template methods.MethodDelegate*/

this.getTitleList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllTitle (int index,Collection<? extends dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName removeTitle (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName setTitle (int index,dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getTitleList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllTitle (UnaryOperator<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getTitleList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortTitle (Comparator<? super dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getTitleList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setTitleList (List<dsl4dataspaces.dsl4dataspaces._ast.ASTComplexName> title)

 {
    /* generated by template methods.Set*/

this.title = title;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearDescription ()

 {
    /* generated by template methods.MethodDelegate*/

this.getDescriptionList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addDescription (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllDescription (Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeDescription (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllDescription (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllDescription (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfDescription (Predicate<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachDescription (Consumer<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getDescriptionList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addDescription (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

this.getDescriptionList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllDescription (int index,Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral removeDescription (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral setDescription (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getDescriptionList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllDescription (UnaryOperator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getDescriptionList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortDescription (Comparator<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getDescriptionList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setDescriptionList (List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> description)

 {
    /* generated by template methods.Set*/

this.description = description;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearPublisher ()

 {
    /* generated by template methods.MethodDelegate*/

this.getPublisherList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addPublisher (String element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllPublisher (Collection<? extends String> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removePublisher (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllPublisher (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllPublisher (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfPublisher (Predicate<? super String> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachPublisher (Consumer<? super String> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getPublisherList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addPublisher (int index,String element)

 {
    /* generated by template methods.MethodDelegate*/

this.getPublisherList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllPublisher (int index,Collection<? extends String> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String removePublisher (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  String setPublisher (int index,String element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getPublisherList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllPublisher (UnaryOperator<String> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getPublisherList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortPublisher (Comparator<? super String> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getPublisherList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setPublisherList (List<String> publisher)

 {
    /* generated by template methods.Set*/

this.publisher = publisher;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearStringLiterals ()

 {
    /* generated by template methods.MethodDelegate*/

this.getStringLiteralList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addStringLiteral (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllStringLiterals (Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeStringLiteral (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllStringLiterals (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllStringLiterals (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfStringLiteral (Predicate<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachStringLiterals (Consumer<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getStringLiteralList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addStringLiteral (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

this.getStringLiteralList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllStringLiterals (int index,Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral removeStringLiteral (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral setStringLiteral (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getStringLiteralList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllStringLiterals (UnaryOperator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getStringLiteralList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortStringLiterals (Comparator<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getStringLiteralList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setStringLiteralList (List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> stringLiterals)

 {
    /* generated by template methods.Set*/

this.stringLiterals = stringLiterals;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearVersion ()

 {
    /* generated by template methods.MethodDelegate*/

this.getVersionList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addVersion (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllVersion (Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeVersion (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllVersion (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllVersion (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfVersion (Predicate<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachVersion (Consumer<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getVersionList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addVersion (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

this.getVersionList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllVersion (int index,Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral removeVersion (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral setVersion (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getVersionList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllVersion (UnaryOperator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getVersionList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortVersion (Comparator<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getVersionList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setVersionList (List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> version)

 {
    /* generated by template methods.Set*/

this.version = version;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearCreated ()

 {
    /* generated by template methods.MethodDelegate*/

this.getCreatedList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addCreated (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllCreated (Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeCreated (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllCreated (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllCreated (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfCreated (Predicate<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachCreated (Consumer<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getCreatedList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addCreated (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

this.getCreatedList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllCreated (int index,Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral removeCreated (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral setCreated (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getCreatedList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllCreated (UnaryOperator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getCreatedList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortCreated (Comparator<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getCreatedList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setCreatedList (List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> created)

 {
    /* generated by template methods.Set*/

this.created = created;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void clearModified ()

 {
    /* generated by template methods.MethodDelegate*/

this.getModifiedList().clear();

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addModified (de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().add(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllModified (Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().addAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeModified (Object element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().remove(element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeAllModified (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().removeAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean retainAllModified (Collection<?> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().retainAll(collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean removeIfModified (Predicate<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> filter)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().removeIf(filter);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void forEachModified (Consumer<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> action)

 {
    /* generated by template methods.MethodDelegate*/

this.getModifiedList().forEach(action);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void addModified (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

this.getModifiedList().add(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  boolean addAllModified (int index,Collection<? extends de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> collection)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().addAll(index, collection);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral removeModified (int index)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().remove(index);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  de.monticore.literals.mccommonliterals._ast.ASTStringLiteral setModified (int index,de.monticore.literals.mccommonliterals._ast.ASTStringLiteral element)

 {
    /* generated by template methods.MethodDelegate*/

return this.getModifiedList().set(index, element);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void replaceAllModified (UnaryOperator<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> operator)

 {
    /* generated by template methods.MethodDelegate*/

this.getModifiedList().replaceAll(operator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void sortModified (Comparator<? super de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> comparator)

 {
    /* generated by template methods.MethodDelegate*/

this.getModifiedList().sort(comparator);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setModifiedList (List<de.monticore.literals.mccommonliterals._ast.ASTStringLiteral> modified)

 {
    /* generated by template methods.Set*/

this.modified = modified;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setLanguage (int language)

 {
    /* generated by template methods.Set*/

this.language = language;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser visitor)

 {
    /* generated by template _ast.ast_class.Accept*/

      visitor.handle(this);

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x44326 AST node type ASTAssetMetaData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.literals.mcjavaliterals._visitor.MCJavaLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x65493 AST node type ASTAssetMetaData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x26360 AST node type ASTAssetMetaData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.literals.mccommonliterals._visitor.MCCommonLiteralsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.mcbasics._visitor.MCBasicsTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x75404 AST node type ASTAssetMetaData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.mcbasics._visitor.MCBasicsTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x66444 AST node type ASTAssetMetaData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.literals.mcliteralsbasis._visitor.MCLiteralsBasisTraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void accept (de.monticore.visitor.ITraverser visitor)

 {
    /* generated by template _ast.ast_class.AcceptSuper*/

  if (visitor instanceof dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) {
    accept((dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser) visitor);
  } else {
    de.se_rwth.commons.logging.Log.error("0xA7000x32092 AST node type ASTAssetMetaData expected a visitor of type dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser, but got de.monticore.visitor.ITraverser. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
  }

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 protected  ASTAssetMetaData _construct ()

 {
    return dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.assetMetaDataBuilder().uncheckedBuild();
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope getEnclosingScope ()

 {
    /* generated by template methods.Get*/

return this.enclosingScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope enclosingScope)

 {
    /* generated by template methods.Set*/

this.enclosingScope = enclosingScope;

}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mcjavaliterals._symboltable.IMCJavaLiteralsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x63698 The EnclosingScope form type de.monticore.literals.mcjavaliterals._symboltable.IMCJavaLiteralsScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x63698 The EnclosingScope form type de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x63698 The EnclosingScope form type de.monticore.literals.mccommonliterals._symboltable.IMCCommonLiteralsScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.mcbasics._symboltable.IMCBasicsScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x63698 The EnclosingScope form type de.monticore.mcbasics._symboltable.IMCBasicsScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}

    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  void setEnclosingScope (de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope enclosingScope)

 {
    /* generated by template _ast.ast_class.symboltable.InheritedSetEnclosingScope*/

  if (enclosingScope instanceof dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope){
    this.enclosingScope = (dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope) enclosingScope;
  }else {
    de.se_rwth.commons.logging.Log.error("0xA7005x63698 The EnclosingScope form type de.monticore.literals.mcliteralsbasis._symboltable.IMCLiteralsBasisScope could not be casted to the type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope. Please call the Method setEnclosingScope with a parameter form type dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope");
  }
}


}


