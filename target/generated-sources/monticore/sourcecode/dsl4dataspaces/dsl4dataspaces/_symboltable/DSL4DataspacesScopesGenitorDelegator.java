/* generated from model DSL4Dataspaces */
/* generated by template cd2java.Class*/

/* (c) https://github.com/MontiCore/monticore */

/* Hookpoint: ClassContent:addComment */

/* generated by template cd2java.Package*/
package dsl4dataspaces.dsl4dataspaces._symboltable;


/* generated by template cd2java.Imports*/

import java.util.*;
import java.util.function.*;
import java.util.stream.Stream;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.SourcePosition;



/* Hookpoint: ClassContent:Imports */



/* Hookpoint: ClassContent:Annotations */

 public  class DSL4DataspacesScopesGenitorDelegator  {

/* Hookpoint: ClassContent:Elements */

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  Deque<dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesScope> scopeStack
  = new java.util.ArrayDeque<>()
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  final  DSL4DataspacesScopesGenitor symbolTable
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesGlobalScope globalScope
  
;

    /* generated by template cd2java.Attribute*/

/* Hookpoint: AttributeContent:Annotations */
 protected  dsl4dataspaces.dsl4dataspaces._visitor.DSL4DataspacesTraverser traverser
  
;


    /* generated by template cd2java.Constructor*/
 public  DSL4DataspacesScopesGenitorDelegator()
 {
  /* generated by template _symboltable.scopesgenitordelegator.ConstructorScopesGenitorDelegator*/

  this.globalScope = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.globalScope();
  this.traverser = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.traverser();
  this.scopeStack.push(this.globalScope);
  de.monticore.literals.mcjavaliterals._symboltable.MCJavaLiteralsScopesGenitor mCJavaLiteralsScopesGenitor = de.monticore.literals.mcjavaliterals.MCJavaLiteralsMill.scopesGenitor();
  mCJavaLiteralsScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCJavaLiterals(mCJavaLiteralsScopesGenitor);
  traverser.setMCJavaLiteralsHandler(mCJavaLiteralsScopesGenitor);

  de.monticore.types.mcbasictypes._symboltable.MCBasicTypesScopesGenitor mCBasicTypesScopesGenitor = de.monticore.types.mcbasictypes.MCBasicTypesMill.scopesGenitor();
  mCBasicTypesScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCBasicTypes(mCBasicTypesScopesGenitor);
  traverser.setMCBasicTypesHandler(mCBasicTypesScopesGenitor);

  de.monticore.literals.mccommonliterals._symboltable.MCCommonLiteralsScopesGenitor mCCommonLiteralsScopesGenitor = de.monticore.literals.mccommonliterals.MCCommonLiteralsMill.scopesGenitor();
  mCCommonLiteralsScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCCommonLiterals(mCCommonLiteralsScopesGenitor);
  traverser.setMCCommonLiteralsHandler(mCCommonLiteralsScopesGenitor);

  de.monticore.literals.mcliteralsbasis._symboltable.MCLiteralsBasisScopesGenitor mCLiteralsBasisScopesGenitor = de.monticore.literals.mcliteralsbasis.MCLiteralsBasisMill.scopesGenitor();
  mCLiteralsBasisScopesGenitor.setScopeStack(scopeStack);
  traverser.add4MCLiteralsBasis(mCLiteralsBasisScopesGenitor);
  traverser.setMCLiteralsBasisHandler(mCLiteralsBasisScopesGenitor);

  symbolTable = dsl4dataspaces.dsl4dataspaces.DSL4DataspacesMill.scopesGenitor();
  symbolTable.setScopeStack(scopeStack);
  traverser.add4DSL4Dataspaces(symbolTable);
  traverser.setDSL4DataspacesHandler(symbolTable);
}


    /* generated by template cd2java.Method*/

/* Hookpoint: MethodContent:Annotations */
 public  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope createFromAST (dsl4dataspaces.dsl4dataspaces._ast.ASTDataSpaceConnectorConfiguration rootNode)

 {
    /* generated by template _symboltable.scopesgenitordelegator.CreateFromASTDelegator*/

  dsl4dataspaces.dsl4dataspaces._symboltable.IDSL4DataspacesArtifactScope as =  symbolTable.createFromAST(rootNode);
  if (as.isPresentName()){
    if (!as.getPackageName().isEmpty()){
      globalScope.addLoadedFile(as.getPackageName() + "." + as.getName());
    } else {
      globalScope.addLoadedFile(as.getName());
    }
  }
  return as;
}


}


