/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id "java"
    id "monticore" version "$mc_version"
    id "maven-publish"
}

def guava_version = '30.0-jre'
def antlr_version = '4.7.1'

def junit_version = '4.13.1'
def freemarker_version = '2.3.32' // Freemarker gradle template needs this parameter. Needs to be deleted after fix
def grammarDir = file("$projectDir/src/main/grammars/")

group = "factory-x"
version = '1.0.1-SNAPSHOT'
description = 'dsl4dataspaces'
sourceCompatibility = "11"

buildDir = file("$projectDir/target")


sourceSets {
    main.java.srcDirs += ["$projectDir/target/generated-sources/monticore/sourcecode"]
    grammars {
        resources {
            srcDirs([grammarDir])
            include "**/*.mc4"
        }
    }
}


allprojects {
    ext.grammarDir = 'src/main/grammars'
    buildDir = file("$projectDir/target")

    repositories {
        maven {
            url repo
        }
        gradlePluginPortal()
    }
}

dependencies {
    implementation "de.monticore:monticore-runtime:$mc_version"
    implementation "de.monticore:monticore-grammar:$mc_version"
    grammar("de.monticore:monticore-grammar:$mc_version") {
        capabilities {
            requireCapability("de.monticore:monticore-grammar-grammars")
        }
    }
    implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
    implementation "de.se_rwth.commons:se-commons-utilities:$se_commons_version"
    implementation group: 'com.google.guava', name: 'guava', version: guava_version
    implementation group: 'de.monticore.lang', name: 'cd4analysis', version: mc_version
    implementation group: 'org.antlr', name: 'antlr4-runtime', version: antlr_version
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'

    testImplementation group: 'junit', name: 'junit', version: junit_version
    testImplementation("de.monticore:monticore-runtime:$mc_version") {
        capabilities {
            requireCapability("de.monticore:monticore-runtime-tests")
        }
    }

}

task generate(type: MCTask) {
    grammar = file "$grammarDir/dsl4dataspaces/DSL4Dataspaces.mc4"
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    def uptoDate = incCheck("DSL4Dataspaces.mc4")
    outputs.upToDateWhen { uptoDate }
}

fileTree(grammarDir).matching { include '**/*.mc4' }.each { g ->
    def taskname = "generateGrammar${g.getName().substring(0,g.getName().lastIndexOf('.'))}"

    task "$taskname" (type: MCTask) {
        grammar = g
        outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
        def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
        outputs.upToDateWhen { incCheck(grammarIncludingPackage) }
    }
    generate.dependsOn ("$taskname")
}

compileJava {
    dependsOn project.collect { it.tasks.withType(MCTask) }
}

java {
    withSourcesJar()
    registerFeature('grammars') {
        usingSourceSet(sourceSets.grammars)
    }
}

sourcesJar.dependsOn project.collect { it.tasks.withType(MCTask) }

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// configure deployment
publishing {
    // configure what artifacts to publish
    publications {
        scolar(MavenPublication) {
            artifactId = "$project.name"
            from components.java
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/scolar-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/scolar-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}

task buildAll(type: GradleBuild) {
    ext.message = 'buildAll'
    tasks = ['build']
}

// generated java doc contains errors, disable for now
javadoc.failOnError(false)

defaultTasks 'build'